{"version":3,"sources":["node_modules/browser-pack/_prelude.js","jsforce-api-bulk.min.js","lib/api/bulk.js","node_modules/process/browser.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Bulk","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","process","inherits","stream","Duplex","events","_","joinStreams","RecordStream","Promise","HttpApi","Job","bulk","type","operation","options","jobId","_bulk","id","state","_batches","EventEmitter","prototype","info","callback","_jobInfo","check","thenCall","open","_logger","toLowerCase","body","extIdField","concurrencyMode","assignmentRuleId","join","_request","method","path","headers","responseType","then","res","emit","jobInfo","err","createBatch","batch","Batch","on","batchId","logger","_waitAssign","debug","object","resolve","list","batchInfoList","batchInfo","isArray","close","_changeState","abort","job","super_","objectMode","_deferred","defer","_setupDataStreams","Writable","converterOptions","nullValue","_uploadStream","Serializable","_uploadDataStream","_downloadStream","Parsable","_downloadDataStream","end","once","pipe","_createRequestStream","dataStream","_dataStream","_write","data","enc","cb","write","read","push","_read","size","chunk","record","clone","Id","attributes","run","exec","execute","input","_result","rdeferred","promise","reject","isObject","isFunction","forEach","Object","keys","key","String","isString","onResolved","onReject","onProgress","nextTick","poll","interval","timeout","startTime","Date","getTime","now","name","parseInt","numberRecordsProcessed","retrieve","stateMessage","setTimeout","results","_conn","result","map","ret","success","Success","errors","fail","resultId","resultStream","resultDataStream","BulkApi","apply","arguments","beforeSend","request","accessToken","isSessionExpired","response","statusCode","test","hasErrorInResponseBody","error","parseError","errorCode","exceptionCode","message","exceptionMessage","conn","pollInterval","pollTimeout","baseUrl","instanceUrl","version","url","load","constructor","createJob","cleanup","query","soql","m","replace","match","recordStream","streams","_process","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","len","marker","runClearTimeout","Item","array","noop","args","Array","title","browser","env","argv","versions","addListener","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask"],"mappings":"CAAA,SAAAA,GAAA,GAAA,iBAAAC,SAAA,oBAAAC,OAAAA,OAAAD,QAAAD,SAAA,GAAA,mBAAAG,QAAAA,OAAAC,IAAAD,OAAA,GAAAH,OAAA,CAAA,IAAAK,GAAAA,GAAAA,GAAAA,GAAAA,EAAA,oBAAAC,OAAAA,OAAA,oBAAAC,OAAAA,OAAA,oBAAAC,KAAAA,KAAAC,MAAAC,UAAAL,EAAAK,QAAA,CAAA,IAAAC,UAAAN,EAAAM,QAAA,CAAA,IAAAC,MAAAP,EAAAO,IAAA,CAAA,IAAAC,KAAAb,GAAA,CAAA,CAAA,EAAA,WAAA,OAAA,SAAAc,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAnB,GAAA,IAAAgB,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAC,EAAA,mBAAAC,SAAAA,QAAA,IAAArB,GAAAoB,EAAA,OAAAA,EAAAD,GAAA,GAAA,GAAAG,EAAA,OAAAA,EAAAH,GAAA,GAAA,IAAAI,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAAA,MAAAI,EAAAE,KAAA,mBAAAF,CAAA,CAAA,IAAAG,EAAAV,EAAAG,GAAA,CAAAlB,QAAA,CAAA,GAAAc,EAAAI,GAAA,GAAAQ,KAAAD,EAAAzB,SAAA,SAAAa,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,EAAA,GAAAY,EAAAA,EAAAzB,QAAAa,EAAAC,EAAAC,EAAAC,EAAA,CAAA,OAAAD,EAAAG,GAAAlB,OAAA,CAAA,IAAA,IAAAqB,EAAA,mBAAAD,SAAAA,QAAAF,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,SAAAG,EAAAnB,EAAAD,ICCA,SAAW4B,GCKX,aAEA,IAAAC,EAAAxB,OAAAI,QAAAW,QAAA,YACAU,EAAAzB,OAAAI,QAAAW,QAAA,mBACAW,EAAAD,EAAAC,OACAC,EAAA3B,OAAAI,QAAAW,QAAA,UACAa,EAAA5B,OAAAI,QAAAW,QAAA,eACAc,EAAA7B,OAAAI,QAAAW,QAAA,eACAX,EAAAJ,OAAAI,QAAAW,QAAA,UACAe,EAAA9B,OAAAI,QAAAW,QAAA,mBACAgB,EAAA/B,OAAAI,QAAAW,QAAA,aACAiB,EAAAhC,OAAAI,QAAAW,QAAA,cAmBAkB,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAnC,KAAAoC,MAAAL,EACA/B,KAAAgC,KAAAA,EACAhC,KAAAiC,UAAAA,EACAjC,KAAAkC,QAAAA,GAAA,CAAA,EACAlC,KAAAqC,GAAAF,EACAnC,KAAAsC,MAAAtC,KAAAqC,GAAA,OAAA,UACArC,KAAAuC,SAAA,CAAA,CACA,EAEAlB,EAAAS,EAAAN,EAAAgB,cAiBAV,EAAAW,UAAAC,KAAA,SAAAC,GAMA,OAHA3C,KAAA4C,WACA5C,KAAA4C,SAAA5C,KAAA6C,SAEA7C,KAAA4C,SAAAE,SAAAH,EACA,EASAb,EAAAW,UAAAM,KAAA,SAAAJ,GACA,IAAA5C,EAAAC,KACA+B,EAAA/B,KAAAoC,MACAL,EAAAiB,QAGA,IAAAhD,KAAA4C,SAAA,CACA,IAAAX,EAAAjC,KAAAiC,UAAAgB,cACA,eAAAhB,IAAAA,EAAA,cACA,IAAAiB,EAAA,CACA,yCACA,oEACA,cAAAjB,EAAA,eACA,WAAAjC,KAAAgC,KAAA,YACAhC,KAAAkC,QAAAiB,WACA,wBAAAnD,KAAAkC,QAAAiB,WAAA,yBACA,GACAnD,KAAAkC,QAAAkB,gBACA,oBAAApD,KAAAkC,QAAAkB,gBAAA,qBACA,GACApD,KAAAkC,QAAAmB,iBACA,qBAAArD,KAAAkC,QAAAmB,iBAAA,sBACA,GACA,iCACA,cACAC,KAAA,IAEAtD,KAAA4C,SAAAb,EAAAwB,SAAA,CACAC,OAAA,OACAC,KAAA,OACAP,KAAAA,EACAQ,QAAA,CACA,eAAA,kCAEAC,aAAA,oBACAC,MAAA,SAAAC,GAIA,OAHA9D,EAAA+D,KAAA,OAAAD,EAAAE,SACAhE,EAAAsC,GAAAwB,EAAAE,QAAA1B,GACAtC,EAAAuC,MAAAuB,EAAAE,QAAAzB,MACAuB,EAAAE,OACA,IAAA,SAAAC,GAEA,MADAjE,EAAA+D,KAAA,QAAAE,GACAA,CACA,GACA,CACA,OAAAhE,KAAA4C,SAAAE,SAAAH,EACA,EAQAb,EAAAW,UAAAwB,YAAA,WACA,IAAAC,EAAA,IAAAC,EAAAnE,MACAD,EAAAC,KAIA,OAHAkE,EAAAE,GAAA,SAAA,WACArE,EAAAwC,SAAA2B,EAAA7B,IAAA6B,CACA,IACAA,CACA,EASApC,EAAAW,UAAAyB,MAAA,SAAAG,GACA,IAAAH,EAAAlE,KAAAuC,SAAA8B,GAKA,OAJAH,IACAA,EAAA,IAAAC,EAAAnE,KAAAqE,GACArE,KAAAuC,SAAA8B,GAAAH,GAEAA,CACA,EASApC,EAAAW,UAAAI,MAAA,SAAAF,GACA,IAAA5C,EAAAC,KACA+B,EAAA/B,KAAAoC,MACAkC,EAAAvC,EAAAiB,QAgBA,OAdAhD,KAAA4C,SAAA5C,KAAAuE,cAAAX,MAAA,WACA,OAAA7B,EAAAwB,SAAA,CACAC,OAAA,MACAC,KAAA,QAAA1D,EAAAsC,GACAsB,aAAA,mBAEA,IAAAC,MAAA,SAAAC,GAMA,OALAS,EAAAE,MAAAX,EAAAE,SACAhE,EAAAsC,GAAAwB,EAAAE,QAAA1B,GACAtC,EAAAiC,KAAA6B,EAAAE,QAAAU,OACA1E,EAAAkC,UAAA4B,EAAAE,QAAA9B,UACAlC,EAAAuC,MAAAuB,EAAAE,QAAAzB,MACAuB,EAAAE,OACA,IACA/D,KAAA4C,SAAAE,SAAAH,EACA,EASAb,EAAAW,UAAA8B,YAAA,SAAA5B,GACA,OAAA3C,KAAAqC,GAAAT,EAAA8C,QAAA,CAAArC,GAAArC,KAAAqC,KAAArC,KAAA+C,QAAAD,SAAAH,EACA,EAUAb,EAAAW,UAAAkC,KAAA,SAAAhC,GACA,IAAA5C,EAAAC,KACA+B,EAAA/B,KAAAoC,MACAkC,EAAAvC,EAAAiB,QAEA,OAAAhD,KAAAuE,cAAAX,MAAA,WACA,OAAA7B,EAAAwB,SAAA,CACAC,OAAA,MACAC,KAAA,QAAA1D,EAAAsC,GAAA,SACAsB,aAAA,mBAEA,IAAAC,MAAA,SAAAC,GACAS,EAAAE,MAAAX,EAAAe,cAAAC,WACA,IAAAD,EAAAf,EAAAe,cAEA,OADAA,EAAAnD,EAAAqD,QAAAF,EAAAC,WAAAD,EAAAC,UAAA,CAAAD,EAAAC,UAEA,IAAA/B,SAAAH,EAEA,EASAb,EAAAW,UAAAsC,MAAA,WACA,IAAAhF,EAAAC,KACA,OAAAA,KAAAgF,aAAA,UAAApB,MAAA,SAAAG,GAGA,OAFAhE,EAAAsC,GAAA,KACAtC,EAAA+D,KAAA,QAAAC,GACAA,CACA,IAAA,SAAAC,GAEA,MADAjE,EAAA+D,KAAA,QAAAE,GACAA,CACA,GACA,EASAlC,EAAAW,UAAAwC,MAAA,WACA,IAAAlF,EAAAC,KACA,OAAAA,KAAAgF,aAAA,WAAApB,MAAA,SAAAG,GAGA,OAFAhE,EAAAsC,GAAA,KACAtC,EAAA+D,KAAA,QAAAC,GACAA,CACA,IAAA,SAAAC,GAEA,MADAjE,EAAA+D,KAAA,QAAAE,GACAA,CACA,GACA,EAKAlC,EAAAW,UAAAuC,aAAA,SAAA1C,EAAAK,GACA,IAAA5C,EAAAC,KACA+B,EAAA/B,KAAAoC,MACAkC,EAAAvC,EAAAiB,QAuBA,OArBAhD,KAAA4C,SAAA5C,KAAAuE,cAAAX,MAAA,WACA,IAAAV,EAAA,CACA,yCACA,mEACA,UAAAZ,EAAA,WACA,cACAgB,KAAA,IACA,OAAAvB,EAAAwB,SAAA,CACAC,OAAA,OACAC,KAAA,QAAA1D,EAAAsC,GACAa,KAAAA,EACAQ,QAAA,CACA,eAAA,kCAEAC,aAAA,mBAEA,IAAAC,MAAA,SAAAC,GAGA,OAFAS,EAAAE,MAAAX,EAAAE,SACAhE,EAAAuC,MAAAuB,EAAAE,QAAAzB,MACAuB,EAAAE,OACA,IACA/D,KAAA4C,SAAAE,SAAAH,EAEA,EAeA,IAAAwB,EAAA,SAAAe,EAAAb,GACAF,EAAAgB,OAAAjE,KAAAlB,KAAA,CAAAoF,YAAA,IACApF,KAAAkF,IAAAA,EACAlF,KAAAqC,GAAAgC,EACArE,KAAAoC,MAAA8C,EAAA9C,MACApC,KAAAqF,UAAAzD,EAAA0D,QACAtF,KAAAuF,mBACA,EAEAlE,EAAA8C,EAAA7C,EAAAkE,UAMArB,EAAA1B,UAAA8C,kBAAA,WACA,IAAArB,EAAAlE,KACAyF,EAAA,CAAAC,UAAA,QACA1F,KAAA2F,cAAA,IAAAhE,EAAAiE,aACA5F,KAAA6F,kBAAA7F,KAAA2F,cAAArE,OAAA,MAAAmE,GACAzF,KAAA8F,gBAAA,IAAAnE,EAAAoE,SACA/F,KAAAgG,oBAAAhG,KAAA8F,gBAAAxE,OAAA,MAAAmE,GAEAzF,KAAAoE,GAAA,UAAA,WACAF,EAAAyB,cAAAM,KACA,IACAjG,KAAA6F,kBAAAK,KAAA,YAAA,WACAhC,EAAAgB,IAAAnC,OAAAa,MAAA,WAEAM,EAAA2B,kBAAAM,KAAAjC,EAAAkC,uBACA,GACA,IAGA,IAAAC,EAAArG,KAAAsG,YAAA,IAAA/E,EACA8E,EAAAE,OAAA,SAAAC,EAAAC,EAAAC,GACAxC,EAAA2B,kBAAAc,MAAAH,EAAAC,EAAAC,EACA,EACAL,EAAAjC,GAAA,UAAA,WACAF,EAAA2B,kBAAAI,KACA,IAEAjG,KAAAgG,oBAAA5B,GAAA,YAAA,WACAiC,EAAAO,KAAA,EACA,IACA5G,KAAAgG,oBAAA5B,GAAA,OAAA,WACAiC,EAAAQ,KAAA,KACA,IACAR,EAAAS,MAAA,SAAAC,GAEA,IADA,IAAAC,EACA,QAAAA,EAAA9C,EAAA8B,oBAAAY,SACAP,EAAAQ,KAAAG,EAEA,CACA,EAQA7C,EAAA1B,UAAA2D,qBAAA,WACA,IAAAlC,EAAAlE,KACA+B,EAAAmC,EAAA9B,MACAkC,EAAAvC,EAAAiB,QAEA,OAAAjB,EAAAwB,SAAA,CACAC,OAAA,OACAC,KAAA,QAAAS,EAAAgB,IAAA7C,GAAA,SACAqB,QAAA,CACA,eAAA,YAEAC,aAAA,oBACA,SAAAK,EAAAH,GACAG,EACAE,EAAAJ,KAAA,QAAAE,IAEAM,EAAAE,MAAAX,EAAAgB,WACAX,EAAA7B,GAAAwB,EAAAgB,UAAAxC,GACA6B,EAAAJ,KAAA,QAAAD,EAAAgB,WAEA,IAAAvD,QACA,EAQA6C,EAAA1B,UAAA8D,OAAA,SAAAU,EAAAR,EAAAC,GACAO,EAAAxF,EAAAyF,MAAAD,GACA,WAAAjH,KAAAkF,IAAAjD,iBACAgF,EAAAE,GACA,WAAAnH,KAAAkF,IAAAjD,YACAgF,EAAA,CAAAE,GAAAF,EAAAE,YAEAF,EAAAjF,YACAiF,EAAAG,WACApH,KAAA2F,cAAAgB,MAAAM,EAAAR,EAAAC,EACA,EAOAvC,EAAA1B,UAAAnB,OAAA,WACA,OAAAtB,KAAAsG,WACA,EAUAnC,EAAA1B,UAAA4E,IACAlD,EAAA1B,UAAA6E,KACAnD,EAAA1B,UAAA8E,QAAA,SAAAC,EAAA7E,GACA,IAAA5C,EAAAC,KAQA,GANA,mBAAAwH,IACA7E,EAAA6E,EACAA,EAAA,MAIAxH,KAAAyH,QACA,MAAA,IAAA1G,MAAA,2BAGA,IAiBAyF,EAjBAkB,EAAA9F,EAAA0D,SACAtF,KAAAyH,QAAAC,EAAAC,QACA3H,KAAAyH,QAAA7D,MAAA,SAAAC,GACA9D,EAAAsF,UAAAX,QAAAb,EACA,IAAA,SAAAG,GACAjE,EAAAsF,UAAAuC,OAAA5D,EACA,IACAhE,KAAAkG,KAAA,YAAA,SAAArC,GACA6D,EAAAhD,QAAAb,EACA,IACA7D,KAAAkG,KAAA,SAAA,SAAAlC,GACA0D,EAAAE,OAAA5D,EACA,IAEAvC,EAAAoG,SAAAL,IAAA/F,EAAAqG,WAAAN,EAAArB,OACAqB,EAAArB,KAAAnG,KAAAsG,aAGA7E,EAAAqD,QAAA0C,IACA/F,EAAAsG,QAAAP,GAAA,SAAAP,GACAe,OAAAC,KAAAhB,GAAAc,SAAA,SAAAG,GACA,kBAAAjB,EAAAiB,KACAjB,EAAAiB,GAAAC,OAAAlB,EAAAiB,IAEA,IACAnI,EAAA4G,MAAAM,EACA,IACAlH,EAAAkG,OACAxE,EAAA2G,SAAAZ,KACAhB,EAAAgB,EACAxH,KAAAsG,YAAAK,MAAAH,EAAA,QACAxG,KAAAsG,YAAAL,OAKA,OAAAjG,KAAA8C,SAAAH,EACA,EAUAwB,EAAA1B,UAAAmB,KAAA,SAAAyE,EAAAC,EAAAC,GACA,OAAAvI,KAAAqF,UAAAsC,QAAA/D,KAAAyE,EAAAC,EAAAC,EACA,EAQApE,EAAA1B,UAAAK,SAAA,SAAAH,GAYA,OAXAlB,EAAAqG,WAAAnF,IACA3C,KAAA4D,MAAA,SAAAC,GACAzC,EAAAoH,UAAA,WACA7F,EAAA,KAAAkB,EACA,GACA,IAAA,SAAAG,GACA5C,EAAAoH,UAAA,WACA7F,EAAAqB,EACA,GACA,IAEAhE,IACA,EAiBAmE,EAAA1B,UAAAI,MAAA,SAAAF,GACA,IACAZ,EAAA/B,KAAAoC,MACAkC,EAAAvC,EAAAiB,QACAb,EAAAnC,KAAAkF,IAAA7C,GACAgC,EAAArE,KAAAqC,GAEA,IAAAF,IAAAkC,EACA,MAAA,IAAAtD,MAAA,sBAEA,OAAAgB,EAAAwB,SAAA,CACAC,OAAA,MACAC,KAAA,QAAAtB,EAAA,UAAAkC,EACAV,aAAA,oBACAC,MAAA,SAAAC,GAEA,OADAS,EAAAE,MAAAX,EAAAgB,WACAhB,EAAAgB,SACA,IAAA/B,SAAAH,EACA,EAUAwB,EAAA1B,UAAAgG,KAAA,SAAAC,EAAAC,GACA,IAAA5I,EAAAC,KACAmC,EAAAnC,KAAAkF,IAAA7C,GACAgC,EAAArE,KAAAqC,GAEA,IAAAF,IAAAkC,EACA,MAAA,IAAAtD,MAAA,sBAEA,IAAA6H,GAAA,IAAAC,MAAAC,UACAL,EAAA,WACA,IAAAM,GAAA,IAAAF,MAAAC,UACA,GAAAF,EAAAD,EAAAI,EAAA,CACA,IAAA/E,EAAA,IAAAjD,MAAA,8BAAAoB,EAAA,iBAAAkC,GAKA,OAJAL,EAAAgF,KAAA,iBACAhF,EAAA7B,MAAAA,EACA6B,EAAAK,QAAAA,OACAtE,EAAA+D,KAAA,QAAAE,EAEA,CACAjE,EAAA8C,OAAA,SAAAmB,EAAAH,GACAG,EACAjE,EAAA+D,KAAA,QAAAE,GAEA,WAAAH,EAAAvB,MACA2G,SAAApF,EAAAqF,uBAAA,IAAA,EACAnJ,EAAAoJ,WAEApJ,EAAA+D,KAAA,QAAA,IAAA/C,MAAA8C,EAAAuF,eAEA,cAAAvF,EAAAvB,MACAvC,EAAAoJ,YAEApJ,EAAA+D,KAAA,WAAAD,GACAwF,WAAAZ,EAAAC,GAGA,GACA,EACAW,WAAAZ,EAAAC,EACA,EAgBAvE,EAAA1B,UAAA0G,SAAA,SAAAxG,GACA,IAAA5C,EAAAC,KACA+B,EAAA/B,KAAAoC,MACAD,EAAAnC,KAAAkF,IAAA7C,GACA6C,EAAAlF,KAAAkF,IACAb,EAAArE,KAAAqC,GAEA,IAAAF,IAAAkC,EACA,MAAA,IAAAtD,MAAA,sBAGA,OAAAmE,EAAAxC,OAAAkB,MAAA,SAAAG,GACA,OAAAhC,EAAAwB,SAAA,CACAC,OAAA,MACAC,KAAA,QAAAtB,EAAA,UAAAkC,EAAA,WAEA,IAAAT,MAAA,SAAAC,GACA,IAAAyF,EACA,GAAA,UAAApE,EAAAjD,UAAA,CACAF,EAAAwH,MACA1F,EAAA,eAAA2F,OACAF,EAAAzF,EAAA,eAAA2F,OACAF,EAAA7H,EAAAgI,IAAAhI,EAAAqD,QAAAwE,GAAAA,EAAA,CAAAA,IAAA,SAAAjH,GACA,MAAA,CACAA,GAAAA,EACAgC,QAAAA,EACAlC,MAAAA,EAEA,GACA,MACAmH,EAAA7H,EAAAgI,IAAA5F,GAAA,SAAA6F,GACA,MAAA,CACArH,GAAAqH,EAAAvC,IAAA,KACAwC,QAAA,SAAAD,EAAAE,QACAC,OAAAH,EAAA3I,MAAA,CAAA2I,EAAA3I,OAAA,GAEA,IAGA,OADAhB,EAAA+D,KAAA,WAAAwF,GACAA,CACA,IAAAQ,MAAA,SAAA9F,GAEA,MADAjE,EAAA+D,KAAA,QAAAE,GACAA,CACA,IAAAlB,SAAAH,EACA,EAOAwB,EAAA1B,UAAA+G,OAAA,SAAAO,GACA,IAAA5H,EAAAnC,KAAAkF,IAAA7C,GACAgC,EAAArE,KAAAqC,GACA,IAAAF,IAAAkC,EACA,MAAA,IAAAtD,MAAA,sBAEA,IAAAiJ,EAAA,IAAArI,EAAAoE,SACAkE,EAAAD,EAAA1I,OAAA,OACAtB,KAAAoC,MAAAmB,SAAA,CACAC,OAAA,MACAC,KAAA,QAAAtB,EAAA,UAAAkC,EAAA,WAAA0F,EACApG,aAAA,6BACArC,SAAA6E,KAAA8D,GACA,OAAAD,CACA,EAMA,IAAAE,EAAA,WACAA,EAAA/E,OAAAgF,MAAAnK,KAAAoK,UACA,EAEA/I,EAAA6I,EAAArI,GAEAqI,EAAAzH,UAAA4H,WAAA,SAAAC,GACAA,EAAA5G,QAAA4G,EAAA5G,SAAA,CAAA,EACA4G,EAAA5G,QAAA,kBAAA1D,KAAAuJ,MAAAgB,WACA,EAEAL,EAAAzH,UAAA+H,iBAAA,SAAAC,GACA,OAAA,MAAAA,EAAAC,YACA,mDAAAC,KAAAF,EAAAvH,KACA,EAEAgH,EAAAzH,UAAAmI,uBAAA,SAAA1H,GACA,QAAAA,EAAA2H,KACA,EAEAX,EAAAzH,UAAAqI,WAAA,SAAA5H,GACA,MAAA,CACA6H,UAAA7H,EAAA2H,MAAAG,cACAC,QAAA/H,EAAA2H,MAAAK,iBAEA,EAUA,IAAA9K,EAAA,SAAA+K,GACAnL,KAAAuJ,MAAA4B,EACAnL,KAAAgD,QAAAmI,EAAAnI,OACA,EAMA5C,EAAAqC,UAAA2I,aAAA,IAMAhL,EAAAqC,UAAA4I,YAAA,IAGAjL,EAAAqC,UAAAc,SAAA,SAAA+G,EAAA3H,GACA,IAAAwI,EAAAnL,KAAAuJ,MACAe,EAAA7I,EAAAyF,MAAAoD,GACA,IAAAgB,EAAA,CAAAH,EAAAI,YAAA,iBAAAJ,EAAAK,SAAAlI,KAAA,KACAgH,EAAAmB,IAAAH,EAAAhB,EAAA7G,KACA,IAAAvB,EAAA,CAAAyB,aAAA2G,EAAA3G,cAGA,cAFA2G,EAAA7G,YACA6G,EAAA3G,aACA,IAAAuG,EAAAlK,KAAAuJ,MAAArH,GAAAoI,QAAAA,GAAAxH,SAAAH,EACA,EAcAvC,EAAAqC,UAAAiJ,KAAA,SAAA1J,EAAAC,EAAAC,EAAAsF,EAAA7E,GACA,IAAA5C,EAAAC,KACA,IAAAgC,IAAAC,EACA,MAAA,IAAAlB,MAAA,0EAEAU,EAAAoG,SAAA3F,IAAAA,EAAAyJ,cAAA3D,SACArF,EAAA6E,EACAA,EAAAtF,EACAA,EAAA,MAEA,IAAAgD,EAAAlF,KAAA4L,UAAA5J,EAAAC,EAAAC,GACAgD,EAAAgB,KAAA,SAAA,SAAA2E,GACA3G,GACAA,EAAAJ,KAAA,QAAA+G,EAEA,IACA,IAAA3G,EAAAgB,EAAAjB,cACA4H,EAAA,WACA3H,EAAA,KACAgB,EAAAH,OACA,EASA,OAHAb,EAAAE,GAAA,WAAAyH,GACA3H,EAAAE,GAAA,SANA,SAAAJ,GACA,mBAAAA,EAAAgF,MACA6C,GAEA,IAGA3H,EAAAE,GAAA,SAAA,WAAAF,EAAAuE,KAAA1I,EAAAqL,aAAArL,EAAAsL,YAAA,IACAnH,EAAAqD,QAAAC,EAAA7E,EACA,EAQAvC,EAAAqC,UAAAqJ,MAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,QAAA,eAAA,IAAAC,MAAA,iBACA,IAAAF,EACA,MAAA,IAAAjL,MAAA,iEAEA,IAAAiB,EAAAgK,EAAA,GACAjM,EAAAC,KACAmM,EAAA,IAAAxK,EAAAoE,SACAM,EAAA8F,EAAA7K,OAAA,OAcA,OAbAtB,KAAA0L,KAAA1J,EAAA,QAAA+J,GAAAnI,MAAA,SAAA0F,GACA,IAAA8C,EAAA9C,EAAAG,KAAA,SAAAD,GACA,OAAAzJ,EACAmF,IAAAsE,EAAArH,OACA+B,MAAAsF,EAAAnF,SACAmF,OAAAA,EAAAnH,IACAf,QACA,IAEAI,EAAA0K,GAAAjG,KAAAE,EACA,IAAAyD,MAAA,SAAA9F,GACAmI,EAAArI,KAAA,QAAAE,EACA,IACAmI,CACA,EAWA/L,EAAAqC,UAAAmJ,UAAA,SAAA5J,EAAAC,EAAAC,GACA,OAAA,IAAAJ,EAAA9B,KAAAgC,EAAAC,EAAAC,EACA,EAQA9B,EAAAqC,UAAAyC,IAAA,SAAA/C,GACA,OAAA,IAAAL,EAAA9B,KAAA,KAAA,KAAA,KAAAmC,EACA,EAOAlC,EAAAmE,GAAA,kBAAA,SAAA+G,GACAA,EAAApJ,KAAA,IAAA3B,EAAA+K,EACA,IAGA1L,EAAAD,QAAAY,CDIC,GAAEc,KAAKlB,KAAKY,EAAQ,YAErB,EAAE,CAACyL,SAAW,IAAI,EAAE,CAAC,SAASzL,EAAQnB,EAAOD,GE/1B7C,IAOA8M,EACAC,EARAnL,EAAA3B,EAAAD,QAAA,CAAA,EAUA,SAAAgN,IACA,MAAA,IAAAzL,MAAA,kCACA,CACA,SAAA0L,IACA,MAAA,IAAA1L,MAAA,oCACA,CAqBA,SAAA2L,EAAAC,GACA,GAAAL,IAAAjD,WAEA,OAAAA,WAAAsD,EAAA,GAGA,IAAAL,IAAAE,IAAAF,IAAAjD,WAEA,OADAiD,EAAAjD,WACAA,WAAAsD,EAAA,GAEA,IAEA,OAAAL,EAAAK,EAAA,EACA,CAAA,MAAArM,GACA,IAEA,OAAAgM,EAAApL,KAAA,KAAAyL,EAAA,EACA,CAAA,MAAArM,GAEA,OAAAgM,EAAApL,KAAAlB,KAAA2M,EAAA,EACA,CACA,CAGA,EA5CA,WACA,IAEAL,EADA,mBAAAjD,WACAA,WAEAmD,CAEA,CAAA,MAAAlM,GACAgM,EAAAE,CACA,CACA,IAEAD,EADA,mBAAAK,aACAA,aAEAH,CAEA,CAAA,MAAAnM,GACAiM,EAAAE,CACA,CACA,CAnBA,GAwEA,IAEAI,EAFAC,EAAA,GACAC,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAF,IAGAE,GAAA,EACAF,EAAA1L,OACA2L,EAAAD,EAAAK,OAAAJ,GAEAE,GAAA,EAEAF,EAAA3L,QACAgM,IAEA,CAEA,SAAAA,IACA,IAAAJ,EAAA,CAGA,IAAApE,EAAA+D,EAAAO,GACAF,GAAA,EAGA,IADA,IAAAK,EAAAN,EAAA3L,OACAiM,GAAA,CAGA,IAFAP,EAAAC,EACAA,EAAA,KACAE,EAAAI,GACAP,GACAA,EAAAG,GAAA3F,MAGA2F,GAAA,EACAI,EAAAN,EAAA3L,MACA,CACA0L,EAAA,KACAE,GAAA,EAnEA,SAAAM,GACA,GAAAd,IAAAK,aAEA,OAAAA,aAAAS,GAGA,IAAAd,IAAAE,IAAAF,IAAAK,aAEA,OADAL,EAAAK,aACAA,aAAAS,GAEA,IAEA,OAAAd,EAAAc,EACA,CAAA,MAAA/M,GACA,IAEA,OAAAiM,EAAArL,KAAA,KAAAmM,EACA,CAAA,MAAA/M,GAGA,OAAAiM,EAAArL,KAAAlB,KAAAqN,EACA,CACA,CAIA,CA0CAC,CAAA3E,EAlBA,CAmBA,CAgBA,SAAA4E,EAAAZ,EAAAa,GACAxN,KAAA2M,IAAAA,EACA3M,KAAAwN,MAAAA,CACA,CAWA,SAAAC,IAAA,CA5BArM,EAAAoH,SAAA,SAAAmE,GACA,IAAAe,EAAA,IAAAC,MAAAvD,UAAAjJ,OAAA,GACA,GAAAiJ,UAAAjJ,OAAA,EACA,IAAA,IAAAT,EAAA,EAAAA,EAAA0J,UAAAjJ,OAAAT,IACAgN,EAAAhN,EAAA,GAAA0J,UAAA1J,GAGAoM,EAAAjG,KAAA,IAAA0G,EAAAZ,EAAAe,IACA,IAAAZ,EAAA3L,QAAA4L,GACAL,EAAAS,EAEA,EAOAI,EAAA9K,UAAA4E,IAAA,WACArH,KAAA2M,IAAAxC,MAAA,KAAAnK,KAAAwN,MACA,EACApM,EAAAwM,MAAA,UACAxM,EAAAyM,SAAA,EACAzM,EAAA0M,IAAA,CAAA,EACA1M,EAAA2M,KAAA,GACA3M,EAAAoK,QAAA,GACApK,EAAA4M,SAAA,CAAA,EAIA5M,EAAAgD,GAAAqJ,EACArM,EAAA6M,YAAAR,EACArM,EAAA8E,KAAAuH,EACArM,EAAA8M,IAAAT,EACArM,EAAA+M,eAAAV,EACArM,EAAAgN,mBAAAX,EACArM,EAAA0C,KAAA2J,EACArM,EAAAiN,gBAAAZ,EACArM,EAAAkN,oBAAAb,EAEArM,EAAAmN,UAAA,SAAAvF,GAAA,MAAA,EAAA,EAEA5H,EAAAoN,QAAA,SAAAxF,GACA,MAAA,IAAAjI,MAAA,mCACA,EAEAK,EAAAqN,IAAA,WAAA,MAAA,GAAA,EACArN,EAAAsN,MAAA,SAAAC,GACA,MAAA,IAAA5N,MAAA,iCACA,EACAK,EAAAwN,MAAA,WAAA,OAAA,CAAA,CFm2BA,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GD1hCX,CC0hCe,EACf","file":"jsforce-api-bulk.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","!function(t){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=t();else if(\"function\"==typeof define&&define.amd)define([],t);else{var e;(e=(e=(e=(e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).jsforce||(e.jsforce={})).modules||(e.modules={})).api||(e.api={})).Bulk=t()}}((function(){return function t(e,n,o){function r(s,a){if(!n[s]){if(!e[s]){var u=\"function\"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error(\"Cannot find module '\"+s+\"'\");throw c.code=\"MODULE_NOT_FOUND\",c}var h=n[s]={exports:{}};e[s][0].call(h.exports,(function(t){return r(e[s][1][t]||t)}),h,h.exports,t,e,n,o)}return n[s].exports}for(var i=\"function\"==typeof require&&require,s=0;s<o.length;s++)r(o[s]);return r}({1:[function(t,e,n){(function(t){\"use strict\";var n=window.jsforce.require(\"inherits\"),o=window.jsforce.require(\"readable-stream\"),r=o.Duplex,i=window.jsforce.require(\"events\"),s=window.jsforce.require(\"lodash/core\"),a=window.jsforce.require(\"multistream\"),u=window.jsforce.require(\"./core\"),c=window.jsforce.require(\"./record-stream\"),h=window.jsforce.require(\"./promise\"),l=window.jsforce.require(\"./http-api\"),p=function(t,e,n,o,r){this._bulk=t,this.type=e,this.operation=n,this.options=o||{},this.id=r,this.state=this.id?\"Open\":\"Unknown\",this._batches={}};n(p,i.EventEmitter),p.prototype.info=function(t){return this._jobInfo||(this._jobInfo=this.check()),this._jobInfo.thenCall(t)},p.prototype.open=function(t){var e=this,n=this._bulk;n._logger;if(!this._jobInfo){var o=this.operation.toLowerCase();\"harddelete\"===o&&(o=\"hardDelete\");var r=['<?xml version=\"1.0\" encoding=\"UTF-8\"?>','<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\"<operation>\"+o+\"</operation>\",\"<object>\"+this.type+\"</object>\",this.options.extIdField?\"<externalIdFieldName>\"+this.options.extIdField+\"</externalIdFieldName>\":\"\",this.options.concurrencyMode?\"<concurrencyMode>\"+this.options.concurrencyMode+\"</concurrencyMode>\":\"\",this.options.assignmentRuleId?\"<assignmentRuleId>\"+this.options.assignmentRuleId+\"</assignmentRuleId>\":\"\",\"<contentType>CSV</contentType>\",\"</jobInfo>\"].join(\"\");this._jobInfo=n._request({method:\"POST\",path:\"/job\",body:r,headers:{\"Content-Type\":\"application/xml; charset=utf-8\"},responseType:\"application/xml\"}).then((function(t){return e.emit(\"open\",t.jobInfo),e.id=t.jobInfo.id,e.state=t.jobInfo.state,t.jobInfo}),(function(t){throw e.emit(\"error\",t),t}))}return this._jobInfo.thenCall(t)},p.prototype.createBatch=function(){var t=new f(this),e=this;return t.on(\"queue\",(function(){e._batches[t.id]=t})),t},p.prototype.batch=function(t){var e=this._batches[t];return e||(e=new f(this,t),this._batches[t]=e),e},p.prototype.check=function(t){var e=this,n=this._bulk,o=n._logger;return this._jobInfo=this._waitAssign().then((function(){return n._request({method:\"GET\",path:\"/job/\"+e.id,responseType:\"application/xml\"})})).then((function(t){return o.debug(t.jobInfo),e.id=t.jobInfo.id,e.type=t.jobInfo.object,e.operation=t.jobInfo.operation,e.state=t.jobInfo.state,t.jobInfo})),this._jobInfo.thenCall(t)},p.prototype._waitAssign=function(t){return(this.id?h.resolve({id:this.id}):this.open()).thenCall(t)},p.prototype.list=function(t){var e=this,n=this._bulk,o=n._logger;return this._waitAssign().then((function(){return n._request({method:\"GET\",path:\"/job/\"+e.id+\"/batch\",responseType:\"application/xml\"})})).then((function(t){o.debug(t.batchInfoList.batchInfo);var e=t.batchInfoList;return e=s.isArray(e.batchInfo)?e.batchInfo:[e.batchInfo]})).thenCall(t)},p.prototype.close=function(){var t=this;return this._changeState(\"Closed\").then((function(e){return t.id=null,t.emit(\"close\",e),e}),(function(e){throw t.emit(\"error\",e),e}))},p.prototype.abort=function(){var t=this;return this._changeState(\"Aborted\").then((function(e){return t.id=null,t.emit(\"abort\",e),e}),(function(e){throw t.emit(\"error\",e),e}))},p.prototype._changeState=function(t,e){var n=this,o=this._bulk,r=o._logger;return this._jobInfo=this._waitAssign().then((function(){var e=['<?xml version=\"1.0\" encoding=\"UTF-8\"?>','<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\"<state>\"+t+\"</state>\",\"</jobInfo>\"].join(\"\");return o._request({method:\"POST\",path:\"/job/\"+n.id,body:e,headers:{\"Content-Type\":\"application/xml; charset=utf-8\"},responseType:\"application/xml\"})})).then((function(t){return r.debug(t.jobInfo),n.state=t.jobInfo.state,t.jobInfo})),this._jobInfo.thenCall(e)};var f=function(t,e){f.super_.call(this,{objectMode:!0}),this.job=t,this.id=e,this._bulk=t._bulk,this._deferred=h.defer(),this._setupDataStreams()};n(f,o.Writable),f.prototype._setupDataStreams=function(){var t=this,e={nullValue:\"#N/A\"};this._uploadStream=new c.Serializable,this._uploadDataStream=this._uploadStream.stream(\"csv\",e),this._downloadStream=new c.Parsable,this._downloadDataStream=this._downloadStream.stream(\"csv\",e),this.on(\"finish\",(function(){t._uploadStream.end()})),this._uploadDataStream.once(\"readable\",(function(){t.job.open().then((function(){t._uploadDataStream.pipe(t._createRequestStream())}))}));var n=this._dataStream=new r;n._write=function(e,n,o){t._uploadDataStream.write(e,n,o)},n.on(\"finish\",(function(){t._uploadDataStream.end()})),this._downloadDataStream.on(\"readable\",(function(){n.read(0)})),this._downloadDataStream.on(\"end\",(function(){n.push(null)})),n._read=function(e){for(var o;null!==(o=t._downloadDataStream.read());)n.push(o)}},f.prototype._createRequestStream=function(){var t=this,e=t._bulk,n=e._logger;return e._request({method:\"POST\",path:\"/job/\"+t.job.id+\"/batch\",headers:{\"Content-Type\":\"text/csv\"},responseType:\"application/xml\"},(function(e,o){e?t.emit(\"error\",e):(n.debug(o.batchInfo),t.id=o.batchInfo.id,t.emit(\"queue\",o.batchInfo))})).stream()},f.prototype._write=function(t,e,n){t=s.clone(t),\"insert\"===this.job.operation?delete t.Id:\"delete\"===this.job.operation&&(t={Id:t.Id}),delete t.type,delete t.attributes,this._uploadStream.write(t,e,n)},f.prototype.stream=function(){return this._dataStream},f.prototype.run=f.prototype.exec=f.prototype.execute=function(t,e){var n=this;if(\"function\"==typeof t&&(e=t,t=null),this._result)throw new Error(\"Batch already executed.\");var o,r=h.defer();(this._result=r.promise,this._result.then((function(t){n._deferred.resolve(t)}),(function(t){n._deferred.reject(t)})),this.once(\"response\",(function(t){r.resolve(t)})),this.once(\"error\",(function(t){r.reject(t)})),s.isObject(t)&&s.isFunction(t.pipe))?t.pipe(this._dataStream):s.isArray(t)?(s.forEach(t,(function(t){Object.keys(t).forEach((function(e){\"boolean\"==typeof t[e]&&(t[e]=String(t[e]))})),n.write(t)})),n.end()):s.isString(t)&&(o=t,this._dataStream.write(o,\"utf8\"),this._dataStream.end());return this.thenCall(e)},f.prototype.then=function(t,e,n){return this._deferred.promise.then(t,e,n)},f.prototype.thenCall=function(e){return s.isFunction(e)&&this.then((function(n){t.nextTick((function(){e(null,n)}))}),(function(n){t.nextTick((function(){e(n)}))})),this},f.prototype.check=function(t){var e=this._bulk,n=e._logger,o=this.job.id,r=this.id;if(!o||!r)throw new Error(\"Batch not started.\");return e._request({method:\"GET\",path:\"/job/\"+o+\"/batch/\"+r,responseType:\"application/xml\"}).then((function(t){return n.debug(t.batchInfo),t.batchInfo})).thenCall(t)},f.prototype.poll=function(t,e){var n=this,o=this.job.id,r=this.id;if(!o||!r)throw new Error(\"Batch not started.\");var i=(new Date).getTime(),s=function(){var a=(new Date).getTime();if(i+e<a){var u=new Error(\"Polling time out. Job Id = \"+o+\" , batch Id = \"+r);return u.name=\"PollingTimeout\",u.jobId=o,u.batchId=r,void n.emit(\"error\",u)}n.check((function(e,o){e?n.emit(\"error\",e):\"Failed\"===o.state?parseInt(o.numberRecordsProcessed,10)>0?n.retrieve():n.emit(\"error\",new Error(o.stateMessage)):\"Completed\"===o.state?n.retrieve():(n.emit(\"progress\",o),setTimeout(s,t))}))};setTimeout(s,t)},f.prototype.retrieve=function(t){var e=this,n=this._bulk,o=this.job.id,r=this.job,i=this.id;if(!o||!i)throw new Error(\"Batch not started.\");return r.info().then((function(t){return n._request({method:\"GET\",path:\"/job/\"+o+\"/batch/\"+i+\"/result\"})})).then((function(t){var a;if(\"query\"===r.operation){n._conn,t[\"result-list\"].result;a=t[\"result-list\"].result,a=s.map(s.isArray(a)?a:[a],(function(t){return{id:t,batchId:i,jobId:o}}))}else a=s.map(t,(function(t){return{id:t.Id||null,success:\"true\"===t.Success,errors:t.Error?[t.Error]:[]}}));return e.emit(\"response\",a),a})).fail((function(t){throw e.emit(\"error\",t),t})).thenCall(t)},f.prototype.result=function(t){var e=this.job.id,n=this.id;if(!e||!n)throw new Error(\"Batch not started.\");var o=new c.Parsable,r=o.stream(\"csv\");this._bulk._request({method:\"GET\",path:\"/job/\"+e+\"/batch/\"+n+\"/result/\"+t,responseType:\"application/octet-stream\"}).stream().pipe(r);return o};var d=function(){d.super_.apply(this,arguments)};n(d,l),d.prototype.beforeSend=function(t){t.headers=t.headers||{},t.headers[\"X-SFDC-SESSION\"]=this._conn.accessToken},d.prototype.isSessionExpired=function(t){return 400===t.statusCode&&/<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(t.body)},d.prototype.hasErrorInResponseBody=function(t){return!!t.error},d.prototype.parseError=function(t){return{errorCode:t.error.exceptionCode,message:t.error.exceptionMessage}};var b=function(t){this._conn=t,this._logger=t._logger};b.prototype.pollInterval=1e3,b.prototype.pollTimeout=1e4,b.prototype._request=function(t,e){var n=this._conn;t=s.clone(t);var o=[n.instanceUrl,\"services/async\",n.version].join(\"/\");t.url=o+t.path;var r={responseType:t.responseType};return delete t.path,delete t.responseType,new d(this._conn,r).request(t).thenCall(e)},b.prototype.load=function(t,e,n,o,r){var i=this;if(!t||!e)throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");s.isObject(n)&&n.constructor===Object||(r=o,o=n,n=null);var a=this.createJob(t,e,n);a.once(\"error\",(function(t){u&&u.emit(\"error\",t)}));var u=a.createBatch(),c=function(){u=null,a.close()};return u.on(\"response\",c),u.on(\"error\",(function(t){\"PollingTimeout\"!==t.name&&c()})),u.on(\"queue\",(function(){u.poll(i.pollInterval,i.pollTimeout)})),u.execute(o,r)},b.prototype.query=function(t){var e=t.replace(/\\([\\s\\S]+\\)/g,\"\").match(/FROM\\s+(\\w+)/i);if(!e)throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");var n=e[1],o=this,r=new c.Parsable,i=r.stream(\"csv\");return this.load(n,\"query\",t).then((function(t){var e=t.map((function(t){return o.job(t.jobId).batch(t.batchId).result(t.id).stream()}));a(e).pipe(i)})).fail((function(t){r.emit(\"error\",t)})),r},b.prototype.createJob=function(t,e,n){return new p(this,t,e,n)},b.prototype.job=function(t){return new p(this,null,null,null,t)},u.on(\"connection:new\",(function(t){t.bulk=new b(t)})),e.exports=b}).call(this,t(\"_process\"))},{_process:2}],2:[function(t,e,n){var o,r,i=e.exports={};function s(){throw new Error(\"setTimeout has not been defined\")}function a(){throw new Error(\"clearTimeout has not been defined\")}function u(t){if(o===setTimeout)return setTimeout(t,0);if((o===s||!o)&&setTimeout)return o=setTimeout,setTimeout(t,0);try{return o(t,0)}catch(e){try{return o.call(null,t,0)}catch(e){return o.call(this,t,0)}}}!function(){try{o=\"function\"==typeof setTimeout?setTimeout:s}catch(t){o=s}try{r=\"function\"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var c,h=[],l=!1,p=-1;function f(){l&&c&&(l=!1,c.length?h=c.concat(h):p=-1,h.length&&d())}function d(){if(!l){var t=u(f);l=!0;for(var e=h.length;e;){for(c=h,h=[];++p<e;)c&&c[p].run();p=-1,e=h.length}c=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{return r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function b(t,e){this.fun=t,this.array=e}function m(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];h.push(new b(t,e)),1!==h.length||l||u(d)},b.prototype.run=function(){this.fun.apply(null,this.array)},i.title=\"browser\",i.browser=!0,i.env={},i.argv=[],i.version=\"\",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(t){return[]},i.binding=function(t){throw new Error(\"process.binding is not supported\")},i.cwd=function(){return\"/\"},i.chdir=function(t){throw new Error(\"process.chdir is not supported\")},i.umask=function(){return 0}},{}]},{},[1])(1)}));\n//# sourceMappingURL=jsforce-api-bulk.min.js.map\n","/*global process*/\n/**\n * @file Manages Salesforce Bulk API related operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits     = window.jsforce.require('inherits'),\n    stream       = window.jsforce.require('readable-stream'),\n    Duplex       = stream.Duplex,\n    events       = window.jsforce.require('events'),\n    _            = window.jsforce.require('lodash/core'),\n    joinStreams  = window.jsforce.require('multistream'),\n    jsforce      = window.jsforce.require('./core'),\n    RecordStream = window.jsforce.require('./record-stream'),\n    Promise      = window.jsforce.require('./promise'),\n    HttpApi      = window.jsforce.require('./http-api');\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API Job\n *\n * @protected\n * @class Bulk~Job\n * @extends events.EventEmitter\n *\n * @param {Bulk} bulk - Bulk API object\n * @param {String} [type] - SObject type\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {String} [jobId] - Job ID (if already available)\n */\nvar Job = function(bulk, type, operation, options, jobId) {\n  this._bulk = bulk;\n  this.type = type;\n  this.operation = operation;\n  this.options = options || {};\n  this.id = jobId;\n  this.state = this.id ? 'Open' : 'Unknown';\n  this._batches = {};\n};\n\ninherits(Job, events.EventEmitter);\n\n/**\n * @typedef {Object} Bulk~JobInfo\n * @prop {String} id - Job ID\n * @prop {String} object - Object type name\n * @prop {String} operation - Operation type of the job\n * @prop {String} state - Job status\n */\n\n/**\n * Return latest jobInfo from cache\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.info = function(callback) {\n  var self = this;\n  // if cache is not available, check the latest\n  if (!this._jobInfo) {\n    this._jobInfo = this.check();\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Open new job and get jobinfo\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.open = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  // if not requested opening job\n  if (!this._jobInfo) {\n    var operation = this.operation.toLowerCase();\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<operation>' + operation + '</operation>',\n        '<object>' + this.type + '</object>',\n        (this.options.extIdField ?\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\n         ''),\n        (this.options.concurrencyMode ?\n         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :\n         ''),\n        (this.options.assignmentRuleId ?\n          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :\n          ''),\n        '<contentType>CSV</contentType>',\n      '</jobInfo>'\n    ].join('');\n\n    this._jobInfo = bulk._request({\n      method : 'POST',\n      path : \"/job\",\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    }).then(function(res) {\n      self.emit(\"open\", res.jobInfo);\n      self.id = res.jobInfo.id;\n      self.state = res.jobInfo.state;\n      return res.jobInfo;\n    }, function(err) {\n      self.emit(\"error\", err);\n      throw err;\n    });\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Create a new batch instance in the job\n *\n * @method Bulk~Job#createBatch\n * @returns {Bulk~Batch}\n */\nJob.prototype.createBatch = function() {\n  var batch = new Batch(this);\n  var self = this;\n  batch.on('queue', function() {\n    self._batches[batch.id] = batch;\n  });\n  return batch;\n};\n\n/**\n * Get a batch instance specified by given batch ID\n *\n * @method Bulk~Job#batch\n * @param {String} batchId - Batch ID\n * @returns {Bulk~Batch}\n */\nJob.prototype.batch = function(batchId) {\n  var batch = this._batches[batchId];\n  if (!batch) {\n    batch = new Batch(this, batchId);\n    this._batches[batchId] = batch;\n  }\n  return batch;\n};\n\n/**\n * Check the latest job status from server\n *\n * @method Bulk~Job#check\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id,\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.id = res.jobInfo.id;\n    self.type = res.jobInfo.object;\n    self.operation = res.jobInfo.operation;\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Wait till the job is assigned to server\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype._waitAssign = function(callback) {\n  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);\n};\n\n\n/**\n * List all registered batch info in job\n *\n * @method Bulk~Job#list\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\n */\nJob.prototype.list = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  return this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id + \"/batch\",\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.batchInfoList.batchInfo);\n    var batchInfoList = res.batchInfoList;\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\n    return batchInfoList;\n  }).thenCall(callback);\n\n};\n\n/**\n * Close opened job\n *\n * @method Bulk~Job#close\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.close = function() {\n  var self = this;\n  return this._changeState(\"Closed\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"close\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * Set the status to abort\n *\n * @method Bulk~Job#abort\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.abort = function() {\n  var self = this;\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"abort\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * @private\n */\nJob.prototype._changeState = function(state, callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<state>' + state + '</state>',\n      '</jobInfo>'\n    ].join('');\n    return bulk._request({\n      method : 'POST',\n      path : \"/job/\" + self.id,\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * Batch (extends RecordStream)\n *\n * @protected\n * @class Bulk~Batch\n * @extends {stream.Writable}\n * @implements {Promise.<Array.<RecordResult>>}\n * @param {Bulk~Job} job - Bulk job object\n * @param {String} [batchId] - Batch ID (if already available)\n */\nvar Batch = function(job, batchId) {\n  Batch.super_.call(this, { objectMode: true });\n  this.job = job;\n  this.id = batchId;\n  this._bulk = job._bulk;\n  this._deferred = Promise.defer();\n  this._setupDataStreams();\n};\n\ninherits(Batch, stream.Writable);\n\n\n/**\n * @private\n */\nBatch.prototype._setupDataStreams = function() {\n  var batch = this;\n  var converterOptions = { nullValue : '#N/A' };\n  this._uploadStream = new RecordStream.Serializable();\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\n  this._downloadStream = new RecordStream.Parsable();\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\n\n  this.on('finish', function() {\n    batch._uploadStream.end();\n  });\n  this._uploadDataStream.once('readable', function() {\n    batch.job.open().then(function() {\n      // pipe upload data to batch API request stream\n      batch._uploadDataStream.pipe(batch._createRequestStream());\n    });\n  });\n\n  // duplex data stream, opened access to API programmers by Batch#stream()\n  var dataStream = this._dataStream = new Duplex();\n  dataStream._write = function(data, enc, cb) {\n    batch._uploadDataStream.write(data, enc, cb);\n  };\n  dataStream.on('finish', function() {\n    batch._uploadDataStream.end();\n  });\n\n  this._downloadDataStream.on('readable', function() {\n    dataStream.read(0);\n  });\n  this._downloadDataStream.on('end', function() {\n    dataStream.push(null);\n  });\n  dataStream._read = function(size) {\n    var chunk;\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\n      dataStream.push(chunk);\n    }\n  };\n};\n\n/**\n * Connect batch API and create stream instance of request/response\n *\n * @private\n * @returns {stream.Duplex}\n */\nBatch.prototype._createRequestStream = function() {\n  var batch = this;\n  var bulk = batch._bulk;\n  var logger = bulk._logger;\n\n  return bulk._request({\n    method : 'POST',\n    path : \"/job/\" + batch.job.id + \"/batch\",\n    headers: {\n      \"Content-Type\": \"text/csv\"\n    },\n    responseType: \"application/xml\"\n  }, function(err, res) {\n    if (err) {\n      batch.emit('error', err);\n    } else {\n      logger.debug(res.batchInfo);\n      batch.id = res.batchInfo.id;\n      batch.emit('queue', res.batchInfo);\n    }\n  }).stream();\n};\n\n/**\n * Implementation of Writable\n *\n * @override\n * @private\n */\nBatch.prototype._write = function(record, enc, cb) {\n  record = _.clone(record);\n  if (this.job.operation === \"insert\") {\n    delete record.Id;\n  } else if (this.job.operation === \"delete\") {\n    record = { Id: record.Id };\n  }\n  delete record.type;\n  delete record.attributes;\n  this._uploadStream.write(record, enc, cb);\n};\n\n/**\n * Returns duplex stream which accepts CSV data input and batch result output\n *\n * @returns {stream.Duplex}\n */\nBatch.prototype.stream = function() {\n  return this._dataStream;\n};\n\n/**\n * Execute batch operation\n *\n * @method Bulk~Batch#execute\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBatch.prototype.run =\nBatch.prototype.exec =\nBatch.prototype.execute = function(input, callback) {\n  var self = this;\n\n  if (typeof input === 'function') { // if input argument is omitted\n    callback = input;\n    input = null;\n  }\n\n  // if batch is already executed\n  if (this._result) {\n    throw new Error(\"Batch already executed.\");\n  }\n\n  var rdeferred = Promise.defer();\n  this._result = rdeferred.promise;\n  this._result.then(function(res) {\n    self._deferred.resolve(res);\n  }, function(err) {\n    self._deferred.reject(err);\n  });\n  this.once('response', function(res) {\n    rdeferred.resolve(res);\n  });\n  this.once('error', function(err) {\n    rdeferred.reject(err);\n  });\n\n  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface\n    input.pipe(this._dataStream);\n  } else {\n    var data;\n    if (_.isArray(input)) {\n      _.forEach(input, function(record) {\n        Object.keys(record).forEach(function(key) {\n          if (typeof record[key] === 'boolean') {\n            record[key] = String(record[key])\n          }\n        })\n        self.write(record);\n      });\n      self.end();\n    } else if (_.isString(input)){\n      data = input;\n      this._dataStream.write(data, 'utf8');\n      this._dataStream.end();\n    }\n  }\n\n  // return Batch instance for chaining\n  return this.thenCall(callback);\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Bulk~Batch#then\n */\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Bulk~Batch#thenCall\n */\nBatch.prototype.thenCall = function(callback) {\n  if (_.isFunction(callback)) {\n    this.then(function(res) {\n      process.nextTick(function() {\n        callback(null, res);\n      });\n    }, function(err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    });\n  }\n  return this;\n};\n\n/**\n * @typedef {Object} Bulk~BatchInfo\n * @prop {String} id - Batch ID\n * @prop {String} jobId - Job ID\n * @prop {String} state - Batch state\n * @prop {String} stateMessage - Batch state message\n */\n\n/**\n * Check the latest batch status in server\n *\n * @method Bulk~Batch#check\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~BatchInfo>}\n */\nBatch.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  return bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\n    responseType: \"application/xml\"\n  }).then(function(res) {\n    logger.debug(res.batchInfo);\n    return res.batchInfo;\n  }).thenCall(callback);\n};\n\n\n/**\n * Polling the batch result and retrieve\n *\n * @method Bulk~Batch#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nBatch.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\n      err.name = 'PollingTimeout';\n      err.jobId = jobId;\n      err.batchId = batchId;\n      self.emit('error', err);\n      return;\n    }\n    self.check(function(err, res) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        if (res.state === \"Failed\") {\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\n            self.retrieve();\n          } else {\n            self.emit('error', new Error(res.stateMessage));\n          }\n        } else if (res.state === \"Completed\") {\n          self.retrieve();\n        } else {\n          self.emit('progress', res);\n          setTimeout(poll, interval);\n        }\n      }\n    });\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * @typedef {Object} Bulk~BatchResultInfo\n * @prop {String} id - Batch result ID\n * @prop {String} batchId - Batch ID which includes this batch result.\n * @prop {String} jobId - Job ID which includes this batch result.\n */\n\n/**\n * Retrieve batch result\n *\n * @method Bulk~Batch#retrieve\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\n */\nBatch.prototype.retrieve = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var jobId = this.job.id;\n  var job = this.job;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return job.info().then(function(jobInfo) {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\n    });\n  }).then(function(res) {\n    var results;\n    if (job.operation === 'query') {\n      var conn = bulk._conn;\n      var resultIds = res['result-list'].result;\n      results = res['result-list'].result;\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\n        return {\n          id: id,\n          batchId: batchId,\n          jobId: jobId\n        };\n      });\n    } else {\n      results = _.map(res, function(ret) {\n        return {\n          id: ret.Id || null,\n          success: ret.Success === \"true\",\n          errors: ret.Error ? [ ret.Error ] : []\n        };\n      });\n    }\n    self.emit('response', results);\n    return results;\n  }).fail(function(err) {\n    self.emit('error', err);\n    throw err;\n  }).thenCall(callback);\n};\n\n/**\n * Fetch query result as a record stream\n * @param {String} resultId - Result id\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\n */\nBatch.prototype.result = function(resultId) {\n  var jobId = this.job.id;\n  var batchId = this.id;\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var resultStream = new RecordStream.Parsable();\n  var resultDataStream = resultStream.stream('csv');\n  var reqStream = this._bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId,\n    responseType: \"application/octet-stream\"\n  }).stream().pipe(resultDataStream);\n  return resultStream;\n};\n\n/*--------------------------------------------*/\n/**\n * @private\n */\nvar BulkApi = function() {\n  BulkApi.super_.apply(this, arguments);\n};\n\ninherits(BulkApi, HttpApi);\n\nBulkApi.prototype.beforeSend = function(request) {\n  request.headers = request.headers || {};\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\n};\n\nBulkApi.prototype.isSessionExpired = function(response) {\n  return response.statusCode === 400 &&\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\n};\n\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\n  return !!body.error;\n};\n\nBulkApi.prototype.parseError = function(body) {\n  return {\n    errorCode: body.error.exceptionCode,\n    message: body.error.exceptionMessage\n  };\n};\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Bulk = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n};\n\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollTimeout = 10000;\n\n/** @private **/\nBulk.prototype._request = function(request, callback) {\n  var conn = this._conn;\n  request = _.clone(request);\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\n  request.url = baseUrl + request.path;\n  var options = { responseType: request.responseType };\n  delete request.path;\n  delete request.responseType;\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\n};\n\n/**\n * Create and start bulkload job and batch\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBulk.prototype.load = function(type, operation, options, input, callback) {\n  var self = this;\n  if (!type || !operation) {\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\n  }\n  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted\n    callback = input;\n    input = options;\n    options = null;\n  }\n  var job = this.createJob(type, operation, options);\n  job.once('error', function (error) {\n    if (batch) {\n      batch.emit('error', error); // pass job error to batch\n    }\n  });\n  var batch = job.createBatch();\n  var cleanup = function() {\n    batch = null;\n    job.close();\n  };\n  var cleanupOnError = function(err) {\n    if (err.name !== 'PollingTimeout') {\n      cleanup();\n    }\n  };\n  batch.on('response', cleanup);\n  batch.on('error', cleanupOnError);\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\n  return batch.execute(input, callback);\n};\n\n/**\n * Execute bulk query and get record stream\n *\n * @param {String} soql - SOQL to execute in bulk job\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\n */\nBulk.prototype.query = function(soql) {\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\n  if (!m) {\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\n  }\n  var type = m[1];\n  var self = this;\n  var recordStream = new RecordStream.Parsable();\n  var dataStream = recordStream.stream('csv');\n  this.load(type, \"query\", soql).then(function(results) {\n    var streams = results.map(function(result) {\n      return self\n        .job(result.jobId)\n        .batch(result.batchId)\n        .result(result.id)\n        .stream();\n    });\n\n    joinStreams(streams).pipe(dataStream);\n  }).fail(function(err) {\n    recordStream.emit('error', err);\n  });\n  return recordStream;\n};\n\n\n/**\n * Create a new job instance\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\n * @param {Object} [options] - Options for bulk loading operation\n * @returns {Bulk~Job}\n */\nBulk.prototype.createJob = function(type, operation, options) {\n  return new Job(this, type, operation, options);\n};\n\n/**\n * Get a job instance specified by given job ID\n *\n * @param {String} jobId - Job ID\n * @returns {Bulk~Job}\n */\nBulk.prototype.job = function(jobId) {\n  return new Job(this, null, null, null, jobId);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.bulk = new Bulk(conn);\n});\n\n\nmodule.exports = Bulk;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"]}