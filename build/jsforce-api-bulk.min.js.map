{"version":3,"sources":["node_modules/browser-pack/_prelude.js","jsforce-api-bulk.min.js","lib/api/bulk.js","node_modules/process/browser.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Bulk","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","process","inherits","stream","Duplex","events","_","joinStreams","RecordStream","Promise","HttpApi","Job","bulk","type","operation","options","jobId","_bulk","id","state","_batches","EventEmitter","prototype","info","callback","_jobInfo","check","thenCall","open","_logger","toLowerCase","body","extIdField","concurrencyMode","assignmentRuleId","join","_request","method","path","headers","Content-Type","responseType","then","res","emit","jobInfo","err","createBatch","batch","Batch","on","batchId","logger","_waitAssign","debug","object","resolve","list","batchInfoList","batchInfo","isArray","close","_changeState","abort","job","super_","objectMode","_deferred","defer","_setupDataStreams","Writable","converterOptions","nullValue","_uploadStream","Serializable","_uploadDataStream","_downloadStream","Parsable","_downloadDataStream","end","once","pipe","_createRequestStream","dataStream","_dataStream","_write","data","enc","cb","write","read","push","_read","size","chunk","record","clone","Id","attributes","run","exec","execute","input","_result","rdeferred","promise","reject","isObject","isFunction","forEach","Object","keys","key","String","isString","onResolved","onReject","onProgress","nextTick","poll","interval","timeout","startTime","Date","getTime","now","name","parseInt","numberRecordsProcessed","retrieve","stateMessage","setTimeout","results","_conn","result","map","ret","success","Success","errors","fail","resultId","resultStream","resultDataStream","BulkApi","apply","arguments","beforeSend","request","accessToken","isSessionExpired","response","statusCode","test","hasErrorInResponseBody","error","parseError","errorCode","exceptionCode","message","exceptionMessage","conn","pollInterval","pollTimeout","baseUrl","instanceUrl","version","url","load","constructor","createJob","cleanup","query","soql","m","replace","match","recordStream","streams","_process","2","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","len","marker","runClearTimeout","Item","array","noop","args","Array","title","browser","env","argv","versions","addListener","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask"],"mappings":"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","file":"jsforce-api-bulk.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","!function(t){var e;\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):(e=(e=(e=(e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).jsforce||(e.jsforce={})).modules||(e.modules={})).api||(e.api={})).Bulk=t()}(function(){return function i(s,a,u){function c(e,t){if(!a[e]){if(!s[e]){var n=\"function\"==typeof require&&require;if(!t&&n)return n(e,!0);if(h)return h(e,!0);var o=new Error(\"Cannot find module '\"+e+\"'\");throw o.code=\"MODULE_NOT_FOUND\",o}var r=a[e]={exports:{}};s[e][0].call(r.exports,function(t){return c(s[e][1][t]||t)},r,r.exports,i,s,a,u)}return a[e].exports}for(var h=\"function\"==typeof require&&require,t=0;t<u.length;t++)c(u[t]);return c}({1:[function(t,b,e){(function(n){\"use strict\";function o(t,e,n,o,r){this._bulk=t,this.type=e,this.operation=n,this.options=o||{},this.id=r,this.state=this.id?\"Open\":\"Unknown\",this._batches={}}var t=window.jsforce.require(\"inherits\"),e=window.jsforce.require(\"readable-stream\"),r=e.Duplex,i=window.jsforce.require(\"events\"),c=window.jsforce.require(\"lodash/core\"),s=window.jsforce.require(\"multistream\"),a=window.jsforce.require(\"./core\"),u=window.jsforce.require(\"./record-stream\"),h=window.jsforce.require(\"./promise\"),l=window.jsforce.require(\"./http-api\");t(o,i.EventEmitter),o.prototype.info=function(t){return this._jobInfo||(this._jobInfo=this.check()),this._jobInfo.thenCall(t)},o.prototype.open=function(t){var e,n,o=this,r=this._bulk;r._logger;return this._jobInfo||(\"harddelete\"===(e=this.operation.toLowerCase())&&(e=\"hardDelete\"),n=['<?xml version=\"1.0\" encoding=\"UTF-8\"?>','<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\"<operation>\"+e+\"</operation>\",\"<object>\"+this.type+\"</object>\",this.options.extIdField?\"<externalIdFieldName>\"+this.options.extIdField+\"</externalIdFieldName>\":\"\",this.options.concurrencyMode?\"<concurrencyMode>\"+this.options.concurrencyMode+\"</concurrencyMode>\":\"\",this.options.assignmentRuleId?\"<assignmentRuleId>\"+this.options.assignmentRuleId+\"</assignmentRuleId>\":\"\",\"<contentType>CSV</contentType>\",\"</jobInfo>\"].join(\"\"),this._jobInfo=r._request({method:\"POST\",path:\"/job\",body:n,headers:{\"Content-Type\":\"application/xml; charset=utf-8\"},responseType:\"application/xml\"}).then(function(t){return o.emit(\"open\",t.jobInfo),o.id=t.jobInfo.id,o.state=t.jobInfo.state,t.jobInfo},function(t){throw o.emit(\"error\",t),t})),this._jobInfo.thenCall(t)},o.prototype.createBatch=function(){var t=new p(this),e=this;return t.on(\"queue\",function(){e._batches[t.id]=t}),t},o.prototype.batch=function(t){var e=this._batches[t];return e||(e=new p(this,t),this._batches[t]=e),e},o.prototype.check=function(t){var e=this,n=this._bulk,o=n._logger;return this._jobInfo=this._waitAssign().then(function(){return n._request({method:\"GET\",path:\"/job/\"+e.id,responseType:\"application/xml\"})}).then(function(t){return o.debug(t.jobInfo),e.id=t.jobInfo.id,e.type=t.jobInfo.object,e.operation=t.jobInfo.operation,e.state=t.jobInfo.state,t.jobInfo}),this._jobInfo.thenCall(t)},o.prototype._waitAssign=function(t){return(this.id?h.resolve({id:this.id}):this.open()).thenCall(t)},o.prototype.list=function(t){var e=this,n=this._bulk,o=n._logger;return this._waitAssign().then(function(){return n._request({method:\"GET\",path:\"/job/\"+e.id+\"/batch\",responseType:\"application/xml\"})}).then(function(t){o.debug(t.batchInfoList.batchInfo);var e=t.batchInfoList;return e=c.isArray(e.batchInfo)?e.batchInfo:[e.batchInfo]}).thenCall(t)},o.prototype.close=function(){var e=this;return this._changeState(\"Closed\").then(function(t){return e.id=null,e.emit(\"close\",t),t},function(t){throw e.emit(\"error\",t),t})},o.prototype.abort=function(){var e=this;return this._changeState(\"Aborted\").then(function(t){return e.id=null,e.emit(\"abort\",t),t},function(t){throw e.emit(\"error\",t),t})},o.prototype._changeState=function(e,t){var n=this,o=this._bulk,r=o._logger;return this._jobInfo=this._waitAssign().then(function(){var t=['<?xml version=\"1.0\" encoding=\"UTF-8\"?>','<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\"<state>\"+e+\"</state>\",\"</jobInfo>\"].join(\"\");return o._request({method:\"POST\",path:\"/job/\"+n.id,body:t,headers:{\"Content-Type\":\"application/xml; charset=utf-8\"},responseType:\"application/xml\"})}).then(function(t){return r.debug(t.jobInfo),n.state=t.jobInfo.state,t.jobInfo}),this._jobInfo.thenCall(t)};var p=function(t,e){p.super_.call(this,{objectMode:!0}),this.job=t,this.id=e,this._bulk=t._bulk,this._deferred=h.defer(),this._setupDataStreams()};t(p,e.Writable),p.prototype._setupDataStreams=function(){var o=this,t={nullValue:\"#N/A\"};this._uploadStream=new u.Serializable,this._uploadDataStream=this._uploadStream.stream(\"csv\",t),this._downloadStream=new u.Parsable,this._downloadDataStream=this._downloadStream.stream(\"csv\",t),this.on(\"finish\",function(){o._uploadStream.end()}),this._uploadDataStream.once(\"readable\",function(){o.job.open().then(function(){o._uploadDataStream.pipe(o._createRequestStream())})});var n=this._dataStream=new r;n._write=function(t,e,n){o._uploadDataStream.write(t,e,n)},n.on(\"finish\",function(){o._uploadDataStream.end()}),this._downloadDataStream.on(\"readable\",function(){n.read(0)}),this._downloadDataStream.on(\"end\",function(){n.push(null)}),n._read=function(t){for(var e;null!==(e=o._downloadDataStream.read());)n.push(e)}},p.prototype._createRequestStream=function(){var n=this,t=n._bulk,o=t._logger;return t._request({method:\"POST\",path:\"/job/\"+n.job.id+\"/batch\",headers:{\"Content-Type\":\"text/csv\"},responseType:\"application/xml\"},function(t,e){t?n.emit(\"error\",t):(o.debug(e.batchInfo),n.id=e.batchInfo.id,n.emit(\"queue\",e.batchInfo))}).stream()},p.prototype._write=function(t,e,n){t=c.clone(t),\"insert\"===this.job.operation?delete t.Id:\"delete\"===this.job.operation&&(t={Id:t.Id}),delete t.type,delete t.attributes,this._uploadStream.write(t,e,n)},p.prototype.stream=function(){return this._dataStream},p.prototype.run=p.prototype.exec=p.prototype.execute=function(t,e){var n=this;if(\"function\"==typeof t&&(e=t,t=null),this._result)throw new Error(\"Batch already executed.\");var o=h.defer();return this._result=o.promise,this._result.then(function(t){n._deferred.resolve(t)},function(t){n._deferred.reject(t)}),this.once(\"response\",function(t){o.resolve(t)}),this.once(\"error\",function(t){o.reject(t)}),c.isObject(t)&&c.isFunction(t.pipe)?t.pipe(this._dataStream):c.isArray(t)?(c.forEach(t,function(e){Object.keys(e).forEach(function(t){\"boolean\"==typeof e[t]&&(e[t]=String(e[t]))}),n.write(e)}),n.end()):c.isString(t)&&(this._dataStream.write(t,\"utf8\"),this._dataStream.end()),this.thenCall(e)},p.prototype.then=function(t,e,n){return this._deferred.promise.then(t,e,n)},p.prototype.thenCall=function(e){return c.isFunction(e)&&this.then(function(t){n.nextTick(function(){e(null,t)})},function(t){n.nextTick(function(){e(t)})}),this},p.prototype.check=function(t){var e=this._bulk,n=e._logger,o=this.job.id,r=this.id;if(!o||!r)throw new Error(\"Batch not started.\");return e._request({method:\"GET\",path:\"/job/\"+o+\"/batch/\"+r,responseType:\"application/xml\"}).then(function(t){return n.debug(t.batchInfo),t.batchInfo}).thenCall(t)},p.prototype.poll=function(n,o){var r=this,i=this.job.id,s=this.id;if(!i||!s)throw new Error(\"Batch not started.\");var a=(new Date).getTime(),u=function(){var t=(new Date).getTime();if(a+o<t){var e=new Error(\"Polling time out. Job Id = \"+i+\" , batch Id = \"+s);return e.name=\"PollingTimeout\",e.jobId=i,e.batchId=s,void r.emit(\"error\",e)}r.check(function(t,e){t?r.emit(\"error\",t):\"Failed\"===e.state?0<parseInt(e.numberRecordsProcessed,10)?r.retrieve():r.emit(\"error\",new Error(e.stateMessage)):\"Completed\"===e.state?r.retrieve():(r.emit(\"progress\",e),setTimeout(u,n))})};setTimeout(u,n)},p.prototype.retrieve=function(t){var n=this,o=this._bulk,r=this.job.id,i=this.job,s=this.id;if(!r||!s)throw new Error(\"Batch not started.\");return i.info().then(function(t){return o._request({method:\"GET\",path:\"/job/\"+r+\"/batch/\"+s+\"/result\"})}).then(function(t){var e;return e=\"query\"===i.operation?(o._conn,t[\"result-list\"].result,e=t[\"result-list\"].result,c.map(c.isArray(e)?e:[e],function(t){return{id:t,batchId:s,jobId:r}})):c.map(t,function(t){return{id:t.Id||null,success:\"true\"===t.Success,errors:t.Error?[t.Error]:[]}}),n.emit(\"response\",e),e}).fail(function(t){throw n.emit(\"error\",t),t}).thenCall(t)},p.prototype.result=function(t){var e=this.job.id,n=this.id;if(!e||!n)throw new Error(\"Batch not started.\");var o=new u.Parsable,r=o.stream(\"csv\");this._bulk._request({method:\"GET\",path:\"/job/\"+e+\"/batch/\"+n+\"/result/\"+t,responseType:\"application/octet-stream\"}).stream().pipe(r);return o};var f=function(){f.super_.apply(this,arguments)};t(f,l),f.prototype.beforeSend=function(t){t.headers=t.headers||{},t.headers[\"X-SFDC-SESSION\"]=this._conn.accessToken},f.prototype.isSessionExpired=function(t){return 400===t.statusCode&&/<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(t.body)},f.prototype.hasErrorInResponseBody=function(t){return!!t.error},f.prototype.parseError=function(t){return{errorCode:t.error.exceptionCode,message:t.error.exceptionMessage}};function d(t){this._conn=t,this._logger=t._logger}d.prototype.pollInterval=1e3,d.prototype.pollTimeout=1e4,d.prototype._request=function(t,e){var n=this._conn;t=c.clone(t);var o=[n.instanceUrl,\"services/async\",n.version].join(\"/\");t.url=o+t.path;var r={responseType:t.responseType};return delete t.path,delete t.responseType,new f(this._conn,r).request(t).thenCall(e)},d.prototype.load=function(t,e,n,o,r){var i=this;if(!t||!e)throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");c.isObject(n)&&n.constructor===Object||(r=o,o=n,n=null);var s=this.createJob(t,e,n);s.once(\"error\",function(t){u&&u.emit(\"error\",t)});function a(){u=null,s.close()}var u=s.createBatch();return u.on(\"response\",a),u.on(\"error\",function(t){\"PollingTimeout\"!==t.name&&a()}),u.on(\"queue\",function(){u.poll(i.pollInterval,i.pollTimeout)}),u.execute(o,r)},d.prototype.query=function(t){var e=t.replace(/\\([\\s\\S]+\\)/g,\"\").match(/FROM\\s+(\\w+)/i);if(!e)throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");var n=e[1],o=this,r=new u.Parsable,i=r.stream(\"csv\");return this.load(n,\"query\",t).then(function(t){var e=t.map(function(t){return o.job(t.jobId).batch(t.batchId).result(t.id).stream()});s(e).pipe(i)}).fail(function(t){r.emit(\"error\",t)}),r},d.prototype.createJob=function(t,e,n){return new o(this,t,e,n)},d.prototype.job=function(t){return new o(this,null,null,null,t)},a.on(\"connection:new\",function(t){t.bulk=new d(t)}),b.exports=d}).call(this,t(\"_process\"))},{_process:2}],2:[function(t,e,n){var o,r,i=e.exports={};function s(){throw new Error(\"setTimeout has not been defined\")}function a(){throw new Error(\"clearTimeout has not been defined\")}function u(e){if(o===setTimeout)return setTimeout(e,0);if((o===s||!o)&&setTimeout)return o=setTimeout,setTimeout(e,0);try{return o(e,0)}catch(t){try{return o.call(null,e,0)}catch(t){return o.call(this,e,0)}}}!function(){try{o=\"function\"==typeof setTimeout?setTimeout:s}catch(t){o=s}try{r=\"function\"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var c,h=[],l=!1,p=-1;function f(){l&&c&&(l=!1,c.length?h=c.concat(h):p=-1,h.length&&d())}function d(){if(!l){var t=u(f);l=!0;for(var e=h.length;e;){for(c=h,h=[];++p<e;)c&&c[p].run();p=-1,e=h.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(t)}}function b(t,e){this.fun=t,this.array=e}function m(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];h.push(new b(t,e)),1!==h.length||l||u(d)},b.prototype.run=function(){this.fun.apply(null,this.array)},i.title=\"browser\",i.browser=!0,i.env={},i.argv=[],i.version=\"\",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(t){return[]},i.binding=function(t){throw new Error(\"process.binding is not supported\")},i.cwd=function(){return\"/\"},i.chdir=function(t){throw new Error(\"process.chdir is not supported\")},i.umask=function(){return 0}},{}]},{},[1])(1)});\n//# sourceMappingURL=jsforce-api-bulk.min.js.map\n","/*global process*/\n/**\n * @file Manages Salesforce Bulk API related operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits     = window.jsforce.require('inherits'),\n    stream       = window.jsforce.require('readable-stream'),\n    Duplex       = stream.Duplex,\n    events       = window.jsforce.require('events'),\n    _            = window.jsforce.require('lodash/core'),\n    joinStreams  = window.jsforce.require('multistream'),\n    jsforce      = window.jsforce.require('./core'),\n    RecordStream = window.jsforce.require('./record-stream'),\n    Promise      = window.jsforce.require('./promise'),\n    HttpApi      = window.jsforce.require('./http-api');\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API Job\n *\n * @protected\n * @class Bulk~Job\n * @extends events.EventEmitter\n *\n * @param {Bulk} bulk - Bulk API object\n * @param {String} [type] - SObject type\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {String} [jobId] - Job ID (if already available)\n */\nvar Job = function(bulk, type, operation, options, jobId) {\n  this._bulk = bulk;\n  this.type = type;\n  this.operation = operation;\n  this.options = options || {};\n  this.id = jobId;\n  this.state = this.id ? 'Open' : 'Unknown';\n  this._batches = {};\n};\n\ninherits(Job, events.EventEmitter);\n\n/**\n * @typedef {Object} Bulk~JobInfo\n * @prop {String} id - Job ID\n * @prop {String} object - Object type name\n * @prop {String} operation - Operation type of the job\n * @prop {String} state - Job status\n */\n\n/**\n * Return latest jobInfo from cache\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.info = function(callback) {\n  var self = this;\n  // if cache is not available, check the latest\n  if (!this._jobInfo) {\n    this._jobInfo = this.check();\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Open new job and get jobinfo\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.open = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  // if not requested opening job\n  if (!this._jobInfo) {\n    var operation = this.operation.toLowerCase();\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<operation>' + operation + '</operation>',\n        '<object>' + this.type + '</object>',\n        (this.options.extIdField ?\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\n         ''),\n        (this.options.concurrencyMode ?\n         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :\n         ''),\n        (this.options.assignmentRuleId ?\n          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :\n          ''),\n        '<contentType>CSV</contentType>',\n      '</jobInfo>'\n    ].join('');\n\n    this._jobInfo = bulk._request({\n      method : 'POST',\n      path : \"/job\",\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    }).then(function(res) {\n      self.emit(\"open\", res.jobInfo);\n      self.id = res.jobInfo.id;\n      self.state = res.jobInfo.state;\n      return res.jobInfo;\n    }, function(err) {\n      self.emit(\"error\", err);\n      throw err;\n    });\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Create a new batch instance in the job\n *\n * @method Bulk~Job#createBatch\n * @returns {Bulk~Batch}\n */\nJob.prototype.createBatch = function() {\n  var batch = new Batch(this);\n  var self = this;\n  batch.on('queue', function() {\n    self._batches[batch.id] = batch;\n  });\n  return batch;\n};\n\n/**\n * Get a batch instance specified by given batch ID\n *\n * @method Bulk~Job#batch\n * @param {String} batchId - Batch ID\n * @returns {Bulk~Batch}\n */\nJob.prototype.batch = function(batchId) {\n  var batch = this._batches[batchId];\n  if (!batch) {\n    batch = new Batch(this, batchId);\n    this._batches[batchId] = batch;\n  }\n  return batch;\n};\n\n/**\n * Check the latest job status from server\n *\n * @method Bulk~Job#check\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id,\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.id = res.jobInfo.id;\n    self.type = res.jobInfo.object;\n    self.operation = res.jobInfo.operation;\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Wait till the job is assigned to server\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype._waitAssign = function(callback) {\n  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);\n};\n\n\n/**\n * List all registered batch info in job\n *\n * @method Bulk~Job#list\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\n */\nJob.prototype.list = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  return this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id + \"/batch\",\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.batchInfoList.batchInfo);\n    var batchInfoList = res.batchInfoList;\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\n    return batchInfoList;\n  }).thenCall(callback);\n\n};\n\n/**\n * Close opened job\n *\n * @method Bulk~Job#close\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.close = function() {\n  var self = this;\n  return this._changeState(\"Closed\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"close\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * Set the status to abort\n *\n * @method Bulk~Job#abort\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.abort = function() {\n  var self = this;\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"abort\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * @private\n */\nJob.prototype._changeState = function(state, callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<state>' + state + '</state>',\n      '</jobInfo>'\n    ].join('');\n    return bulk._request({\n      method : 'POST',\n      path : \"/job/\" + self.id,\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * Batch (extends RecordStream)\n *\n * @protected\n * @class Bulk~Batch\n * @extends {stream.Writable}\n * @implements {Promise.<Array.<RecordResult>>}\n * @param {Bulk~Job} job - Bulk job object\n * @param {String} [batchId] - Batch ID (if already available)\n */\nvar Batch = function(job, batchId) {\n  Batch.super_.call(this, { objectMode: true });\n  this.job = job;\n  this.id = batchId;\n  this._bulk = job._bulk;\n  this._deferred = Promise.defer();\n  this._setupDataStreams();\n};\n\ninherits(Batch, stream.Writable);\n\n\n/**\n * @private\n */\nBatch.prototype._setupDataStreams = function() {\n  var batch = this;\n  var converterOptions = { nullValue : '#N/A' };\n  this._uploadStream = new RecordStream.Serializable();\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\n  this._downloadStream = new RecordStream.Parsable();\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\n\n  this.on('finish', function() {\n    batch._uploadStream.end();\n  });\n  this._uploadDataStream.once('readable', function() {\n    batch.job.open().then(function() {\n      // pipe upload data to batch API request stream\n      batch._uploadDataStream.pipe(batch._createRequestStream());\n    });\n  });\n\n  // duplex data stream, opened access to API programmers by Batch#stream()\n  var dataStream = this._dataStream = new Duplex();\n  dataStream._write = function(data, enc, cb) {\n    batch._uploadDataStream.write(data, enc, cb);\n  };\n  dataStream.on('finish', function() {\n    batch._uploadDataStream.end();\n  });\n\n  this._downloadDataStream.on('readable', function() {\n    dataStream.read(0);\n  });\n  this._downloadDataStream.on('end', function() {\n    dataStream.push(null);\n  });\n  dataStream._read = function(size) {\n    var chunk;\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\n      dataStream.push(chunk);\n    }\n  };\n};\n\n/**\n * Connect batch API and create stream instance of request/response\n *\n * @private\n * @returns {stream.Duplex}\n */\nBatch.prototype._createRequestStream = function() {\n  var batch = this;\n  var bulk = batch._bulk;\n  var logger = bulk._logger;\n\n  return bulk._request({\n    method : 'POST',\n    path : \"/job/\" + batch.job.id + \"/batch\",\n    headers: {\n      \"Content-Type\": \"text/csv\"\n    },\n    responseType: \"application/xml\"\n  }, function(err, res) {\n    if (err) {\n      batch.emit('error', err);\n    } else {\n      logger.debug(res.batchInfo);\n      batch.id = res.batchInfo.id;\n      batch.emit('queue', res.batchInfo);\n    }\n  }).stream();\n};\n\n/**\n * Implementation of Writable\n *\n * @override\n * @private\n */\nBatch.prototype._write = function(record, enc, cb) {\n  record = _.clone(record);\n  if (this.job.operation === \"insert\") {\n    delete record.Id;\n  } else if (this.job.operation === \"delete\") {\n    record = { Id: record.Id };\n  }\n  delete record.type;\n  delete record.attributes;\n  this._uploadStream.write(record, enc, cb);\n};\n\n/**\n * Returns duplex stream which accepts CSV data input and batch result output\n *\n * @returns {stream.Duplex}\n */\nBatch.prototype.stream = function() {\n  return this._dataStream;\n};\n\n/**\n * Execute batch operation\n *\n * @method Bulk~Batch#execute\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBatch.prototype.run =\nBatch.prototype.exec =\nBatch.prototype.execute = function(input, callback) {\n  var self = this;\n\n  if (typeof input === 'function') { // if input argument is omitted\n    callback = input;\n    input = null;\n  }\n\n  // if batch is already executed\n  if (this._result) {\n    throw new Error(\"Batch already executed.\");\n  }\n\n  var rdeferred = Promise.defer();\n  this._result = rdeferred.promise;\n  this._result.then(function(res) {\n    self._deferred.resolve(res);\n  }, function(err) {\n    self._deferred.reject(err);\n  });\n  this.once('response', function(res) {\n    rdeferred.resolve(res);\n  });\n  this.once('error', function(err) {\n    rdeferred.reject(err);\n  });\n\n  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface\n    input.pipe(this._dataStream);\n  } else {\n    var data;\n    if (_.isArray(input)) {\n      _.forEach(input, function(record) {\n        Object.keys(record).forEach(function(key) {\n          if (typeof record[key] === 'boolean') {\n            record[key] = String(record[key])\n          }\n        })\n        self.write(record);\n      });\n      self.end();\n    } else if (_.isString(input)){\n      data = input;\n      this._dataStream.write(data, 'utf8');\n      this._dataStream.end();\n    }\n  }\n\n  // return Batch instance for chaining\n  return this.thenCall(callback);\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Bulk~Batch#then\n */\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Bulk~Batch#thenCall\n */\nBatch.prototype.thenCall = function(callback) {\n  if (_.isFunction(callback)) {\n    this.then(function(res) {\n      process.nextTick(function() {\n        callback(null, res);\n      });\n    }, function(err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    });\n  }\n  return this;\n};\n\n/**\n * @typedef {Object} Bulk~BatchInfo\n * @prop {String} id - Batch ID\n * @prop {String} jobId - Job ID\n * @prop {String} state - Batch state\n * @prop {String} stateMessage - Batch state message\n */\n\n/**\n * Check the latest batch status in server\n *\n * @method Bulk~Batch#check\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~BatchInfo>}\n */\nBatch.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  return bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\n    responseType: \"application/xml\"\n  }).then(function(res) {\n    logger.debug(res.batchInfo);\n    return res.batchInfo;\n  }).thenCall(callback);\n};\n\n\n/**\n * Polling the batch result and retrieve\n *\n * @method Bulk~Batch#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nBatch.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\n      err.name = 'PollingTimeout';\n      err.jobId = jobId;\n      err.batchId = batchId;\n      self.emit('error', err);\n      return;\n    }\n    self.check(function(err, res) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        if (res.state === \"Failed\") {\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\n            self.retrieve();\n          } else {\n            self.emit('error', new Error(res.stateMessage));\n          }\n        } else if (res.state === \"Completed\") {\n          self.retrieve();\n        } else {\n          self.emit('progress', res);\n          setTimeout(poll, interval);\n        }\n      }\n    });\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * @typedef {Object} Bulk~BatchResultInfo\n * @prop {String} id - Batch result ID\n * @prop {String} batchId - Batch ID which includes this batch result.\n * @prop {String} jobId - Job ID which includes this batch result.\n */\n\n/**\n * Retrieve batch result\n *\n * @method Bulk~Batch#retrieve\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\n */\nBatch.prototype.retrieve = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var jobId = this.job.id;\n  var job = this.job;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return job.info().then(function(jobInfo) {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\n    });\n  }).then(function(res) {\n    var results;\n    if (job.operation === 'query') {\n      var conn = bulk._conn;\n      var resultIds = res['result-list'].result;\n      results = res['result-list'].result;\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\n        return {\n          id: id,\n          batchId: batchId,\n          jobId: jobId\n        };\n      });\n    } else {\n      results = _.map(res, function(ret) {\n        return {\n          id: ret.Id || null,\n          success: ret.Success === \"true\",\n          errors: ret.Error ? [ ret.Error ] : []\n        };\n      });\n    }\n    self.emit('response', results);\n    return results;\n  }).fail(function(err) {\n    self.emit('error', err);\n    throw err;\n  }).thenCall(callback);\n};\n\n/**\n * Fetch query result as a record stream\n * @param {String} resultId - Result id\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\n */\nBatch.prototype.result = function(resultId) {\n  var jobId = this.job.id;\n  var batchId = this.id;\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var resultStream = new RecordStream.Parsable();\n  var resultDataStream = resultStream.stream('csv');\n  var reqStream = this._bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId,\n    responseType: \"application/octet-stream\"\n  }).stream().pipe(resultDataStream);\n  return resultStream;\n};\n\n/*--------------------------------------------*/\n/**\n * @private\n */\nvar BulkApi = function() {\n  BulkApi.super_.apply(this, arguments);\n};\n\ninherits(BulkApi, HttpApi);\n\nBulkApi.prototype.beforeSend = function(request) {\n  request.headers = request.headers || {};\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\n};\n\nBulkApi.prototype.isSessionExpired = function(response) {\n  return response.statusCode === 400 &&\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\n};\n\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\n  return !!body.error;\n};\n\nBulkApi.prototype.parseError = function(body) {\n  return {\n    errorCode: body.error.exceptionCode,\n    message: body.error.exceptionMessage\n  };\n};\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Bulk = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n};\n\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollTimeout = 10000;\n\n/** @private **/\nBulk.prototype._request = function(request, callback) {\n  var conn = this._conn;\n  request = _.clone(request);\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\n  request.url = baseUrl + request.path;\n  var options = { responseType: request.responseType };\n  delete request.path;\n  delete request.responseType;\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\n};\n\n/**\n * Create and start bulkload job and batch\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBulk.prototype.load = function(type, operation, options, input, callback) {\n  var self = this;\n  if (!type || !operation) {\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\n  }\n  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted\n    callback = input;\n    input = options;\n    options = null;\n  }\n  var job = this.createJob(type, operation, options);\n  job.once('error', function (error) {\n    if (batch) {\n      batch.emit('error', error); // pass job error to batch\n    }\n  });\n  var batch = job.createBatch();\n  var cleanup = function() {\n    batch = null;\n    job.close();\n  };\n  var cleanupOnError = function(err) {\n    if (err.name !== 'PollingTimeout') {\n      cleanup();\n    }\n  };\n  batch.on('response', cleanup);\n  batch.on('error', cleanupOnError);\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\n  return batch.execute(input, callback);\n};\n\n/**\n * Execute bulk query and get record stream\n *\n * @param {String} soql - SOQL to execute in bulk job\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\n */\nBulk.prototype.query = function(soql) {\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\n  if (!m) {\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\n  }\n  var type = m[1];\n  var self = this;\n  var recordStream = new RecordStream.Parsable();\n  var dataStream = recordStream.stream('csv');\n  this.load(type, \"query\", soql).then(function(results) {\n    var streams = results.map(function(result) {\n      return self\n        .job(result.jobId)\n        .batch(result.batchId)\n        .result(result.id)\n        .stream();\n    });\n\n    joinStreams(streams).pipe(dataStream);\n  }).fail(function(err) {\n    recordStream.emit('error', err);\n  });\n  return recordStream;\n};\n\n\n/**\n * Create a new job instance\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\n * @param {Object} [options] - Options for bulk loading operation\n * @returns {Bulk~Job}\n */\nBulk.prototype.createJob = function(type, operation, options) {\n  return new Job(this, type, operation, options);\n};\n\n/**\n * Get a job instance specified by given job ID\n *\n * @param {String} jobId - Job ID\n * @returns {Bulk~Job}\n */\nBulk.prototype.job = function(jobId) {\n  return new Job(this, null, null, null, jobId);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.bulk = new Bulk(conn);\n});\n\n\nmodule.exports = Bulk;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"]}