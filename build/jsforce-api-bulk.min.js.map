{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","jsforce-api-bulk.min.js","lib/api/bulk.js","node_modules/browserify/node_modules/buffer/index.js","node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","node_modules/browserify/node_modules/buffer/node_modules/isarray/index.js","node_modules/browserify/node_modules/events/events.js","node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js","node_modules/browserify/node_modules/process/browser.js","node_modules/inherits/inherits_browser.js","node_modules/multistream/index.js","node_modules/readable-stream/lib/_stream_duplex.js","node_modules/readable-stream/lib/_stream_passthrough.js","node_modules/readable-stream/lib/_stream_readable.js","node_modules/readable-stream/lib/_stream_transform.js","node_modules/readable-stream/lib/_stream_writable.js","node_modules/readable-stream/node_modules/core-util-is/lib/util.js","node_modules/readable-stream/node_modules/process-nextick-args/index.js","node_modules/readable-stream/node_modules/string_decoder/index.js","node_modules/readable-stream/node_modules/util-deprecate/browser.js","node_modules/readable-stream/readable.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Bulk","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","process","inherits","stream","Duplex","events","_","RecordStream","Promise","HttpApi","joinStreams","Job","bulk","type","operation","options","jobId","_bulk","id","state","_batches","EventEmitter","prototype","info","callback","_jobInfo","check","thenCall","open","_logger","toLowerCase","body","extIdField","concurrencyMode","assignmentRuleId","join","_request","method","path","headers","Content-Type","responseType","then","res","emit","jobInfo","err","createBatch","batch","Batch","on","batchId","logger","_waitAssign","debug","object","resolve","list","batchInfoList","batchInfo","isArray","close","_changeState","abort","job","super_","objectMode","_deferred","defer","_setupDataStreams","Writable","converterOptions","nullValue","_uploadStream","Serializable","_uploadDataStream","_downloadStream","Parsable","_downloadDataStream","end","once","pipe","_createRequestStream","dataStream","_dataStream","_write","data","enc","cb","write","read","push","_read","size","chunk","record","clone","Id","attributes","run","exec","execute","input","_result","rdeferred","promise","reject","isObject","isFunction","forEach","isString","onResolved","onReject","onProgress","nextTick","poll","interval","timeout","startTime","Date","getTime","now","name","parseInt","numberRecordsProcessed","retrieve","stateMessage","setTimeout","results","_conn","result","map","ret","success","Success","errors","fail","resultId","resultStream","resultDataStream","BulkApi","apply","arguments","beforeSend","request","accessToken","isSessionExpired","response","statusCode","test","hasErrorInResponseBody","error","parseError","errorCode","exceptionCode","message","exceptionMessage","conn","pollInterval","pollTimeout","baseUrl","instanceUrl","version","url","load","constructor","Object","createJob","cleanup","cleanupOnError","query","soql","m","replace","match","recordStream","streams","_process","multistream","2","3","typedArraySupport","arr","Uint8Array","foo","subarray","byteLength","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","from","value","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","alloc","fill","encoding","undefined","checked","string","isEncoding","fromArrayLike","array","byteOffset","obj","isBuffer","len","copy","buffer","isnan","toString","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","slowToString","start","hexSlice","utf8Slice","asciiSlice","binarySlice","base64Slice","utf16leSlice","swap","b","arrayIndexOf","val","buf","indexSize","readUInt16BE","arrLength","valLength","String","foundIndex","hexWrite","offset","Number","remaining","strLen","parsed","substr","isNaN","utf8Write","blitBuffer","asciiWrite","asciiToBytes","binaryWrite","base64Write","ucs2Write","utf16leToBytes","base64","fromByteArray","slice","Math","min","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","j","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","INVALID_BASE64_RE","trim","units","Infinity","leadSurrogate","charCodeAt","byteArray","c","hi","lo","toByteArray","src","dst","INSPECT_MAX_BYTES","poolSize","_augment","Symbol","species","defineProperty","configurable","allocUnsafeSlow","_isBuffer","compare","x","y","concat","pos","swap16","swap32","equals","inspect","target","thisStart","thisEnd","thisCopy","targetCopy","indexOf","includes","isFinite","toJSON","Array","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","base64-js","isarray","4","init","lookup","revLookup","b64","tmp","placeHolders","Arr","L","tripletToBase64","num","encodeChunk","uint8","output","extraBytes","parts","maxChunkLength","len2","5","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","NaN","rt","abs","log","LN2","6","7","_events","_maxListeners","isNumber","isUndefined","defaultMaxListeners","setMaxListeners","er","handler","args","listeners","addListener","listener","newListener","warned","console","trace","removeListener","fired","position","splice","removeAllListeners","key","listenerCount","evlistener","emitter","8","9","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","clearTimeout","Item","fun","noop","title","browser","env","argv","versions","off","binding","cwd","chdir","dir","umask","10","create","ctor","superCtor","enumerable","writable","TempCtor","11","MultiStream","opts","Readable","destroyed","_drained","_forwarding","_current","_queue","toStreams2","_next","_readableState","wrap","destroy","bind","highWaterMark","_forward","_gotNextStream","shift","onReadable","onClose","ended","onEnd","onError","readable-stream","12","readable","allowHalfOpen","onend","_writableState","processNextTick","onEndNT","objectKeys","keys","util","v","./_stream_readable","./_stream_writable","core-util-is","process-nextick-args","13","PassThrough","Transform","_transform","./_stream_transform","14","ReadableState","readableObjectMode","hwm","defaultHwm","pipes","pipesCount","flowing","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","StringDecoder","Stream","readableAddChunk","addToFront","chunkInvalid","onEofChunk","skipAdd","unshift","emitReadable","maybeReadMore","needMoreData","computeNewHighWaterMark","MAX_HWM","howMuchToRead","emitReadable_","flow","maybeReadMore_","pipeOnDrain","EElistenerCount","nReadingNextTick","resume","resume_","fromList","stringMode","cpy","endReadable","endReadableNT","xs","debugUtil","debuglog","isPaused","setEncoding","nOrig","doRead","dest","pipeOpts","onunpipe","onclose","onfinish","ondrain","onerror","ondata","cleanedUp","needDrain","pause","unpipe","doEnd","stdout","stderr","endFn","dests","_i","ev","fn","paused","_fromList","./_stream_duplex","string_decoder/","15","TransformState","afterTransform","needTransform","transforming","writecb","writechunk","writeencoding","ts","_transformState","rs","transform","flush","_flush","done","ws","16","nop","WriteReq","next","WritableState","writableObjectMode","ending","finished","noDecode","decodeStrings","writing","corked","bufferProcessing","onwrite","writelen","bufferedRequest","lastBufferedRequest","pendingcb","prefinished","errorEmitted","bufferedRequestCount","corkedRequestsFree","CorkedRequest","writev","_writev","writeAfterEnd","validChunk","valid","decodeChunk","writeOrBuffer","last","doWrite","onwriteError","onwriteStateUpdate","needFinish","clearBuffer","asyncWrite","afterWrite","onwriteDrain","finishMaybe","entry","holder","count","finish","prefinish","need","endWritable","_this","setImmediate","internalUtil","deprecate","getBuffer","current","get","cork","uncork","setDefaultEncoding","util-deprecate","17","objectToString","isBoolean","isNull","isNullOrUndefined","isSymbol","isRegExp","re","isDate","isError","isPrimitive","../../../../browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js","18","dup","19","arg1","arg2","arg3","20","assertEncoding","isBufferEncoding","passThroughWrite","utf16DetectIncompleteChar","charReceived","charLength","base64DetectIncompleteChar","surrogateSize","detectIncompleteChar","charBuffer","charStr","available","charCode","substring","cr","21","msg","deprecated","config","warn","localStorage","22","READABLE_STREAM","./lib/_stream_duplex.js","./lib/_stream_passthrough.js","./lib/_stream_readable.js","./lib/_stream_transform.js","./lib/_stream_writable.js"],"mappings":"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","file":"jsforce-api-bulk.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Bulk = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process){\n/*global process*/\n/**\n * @file Manages Salesforce Bulk API related operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits     = window.jsforce.require('inherits'),\n    stream       = window.jsforce.require('readable-stream'),\n    Duplex       = stream.Duplex,\n    events       = window.jsforce.require('events'),\n    _            = window.jsforce.require('lodash/core'),\n    jsforce      = window.jsforce.require('./core'),\n    RecordStream = window.jsforce.require('./record-stream'),\n    CSV          = window.jsforce.require('./csv'),\n    Promise      = window.jsforce.require('./promise'),\n    HttpApi      = window.jsforce.require('./http-api'),\n    joinStreams  = require('multistream');\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API Job\n *\n * @protected\n * @class Bulk~Job\n * @extends events.EventEmitter\n *\n * @param {Bulk} bulk - Bulk API object\n * @param {String} [type] - SObject type\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {String} [jobId] - Job ID (if already available)\n */\nvar Job = function(bulk, type, operation, options, jobId) {\n  this._bulk = bulk;\n  this.type = type;\n  this.operation = operation;\n  this.options = options || {};\n  this.id = jobId;\n  this.state = this.id ? 'Open' : 'Unknown';\n  this._batches = {};\n};\n\ninherits(Job, events.EventEmitter);\n\n/**\n * @typedef {Object} Bulk~JobInfo\n * @prop {String} id - Job ID\n * @prop {String} object - Object type name\n * @prop {String} operation - Operation type of the job\n * @prop {String} state - Job status\n */\n\n/**\n * Return latest jobInfo from cache\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.info = function(callback) {\n  var self = this;\n  // if cache is not available, check the latest\n  if (!this._jobInfo) {\n    this._jobInfo = this.check();\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Open new job and get jobinfo\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.open = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  // if not requested opening job\n  if (!this._jobInfo) {\n    var operation = this.operation.toLowerCase();\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<operation>' + operation + '</operation>',\n        '<object>' + this.type + '</object>',\n        (this.options.extIdField ?\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\n         ''),\n        (this.options.concurrencyMode ?\n         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :\n         ''),\n        (this.options.assignmentRuleId ?\n          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :\n          ''),\n        '<contentType>CSV</contentType>',\n      '</jobInfo>'\n    ].join('');\n\n    this._jobInfo = bulk._request({\n      method : 'POST',\n      path : \"/job\",\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    }).then(function(res) {\n      self.emit(\"open\", res.jobInfo);\n      self.id = res.jobInfo.id;\n      self.state = res.jobInfo.state;\n      return res.jobInfo;\n    }, function(err) {\n      self.emit(\"error\", err);\n      throw err;\n    });\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Create a new batch instance in the job\n *\n * @method Bulk~Job#createBatch\n * @returns {Bulk~Batch}\n */\nJob.prototype.createBatch = function() {\n  var batch = new Batch(this);\n  var self = this;\n  batch.on('queue', function() {\n    self._batches[batch.id] = batch;\n  });\n  return batch;\n};\n\n/**\n * Get a batch instance specified by given batch ID\n *\n * @method Bulk~Job#batch\n * @param {String} batchId - Batch ID\n * @returns {Bulk~Batch}\n */\nJob.prototype.batch = function(batchId) {\n  var batch = this._batches[batchId];\n  if (!batch) {\n    batch = new Batch(this, batchId);\n    this._batches[batchId] = batch;\n  }\n  return batch;\n};\n\n/**\n * Check the latest job status from server\n *\n * @method Bulk~Job#check\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id,\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.id = res.jobInfo.id;\n    self.type = res.jobInfo.object;\n    self.operation = res.jobInfo.operation;\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Wait till the job is assigned to server\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype._waitAssign = function(callback) {\n  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);\n};\n\n\n/**\n * List all registered batch info in job\n *\n * @method Bulk~Job#list\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\n */\nJob.prototype.list = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  return this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id + \"/batch\",\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.batchInfoList.batchInfo);\n    var batchInfoList = res.batchInfoList;\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\n    return batchInfoList;\n  }).thenCall(callback);\n\n};\n\n/**\n * Close opened job\n *\n * @method Bulk~Job#close\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.close = function() {\n  var self = this;\n  return this._changeState(\"Closed\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"close\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * Set the status to abort\n *\n * @method Bulk~Job#abort\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.abort = function() {\n  var self = this;\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"abort\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * @private\n */\nJob.prototype._changeState = function(state, callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<state>' + state + '</state>',\n      '</jobInfo>'\n    ].join('');\n    return bulk._request({\n      method : 'POST',\n      path : \"/job/\" + self.id,\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * Batch (extends RecordStream)\n *\n * @protected\n * @class Bulk~Batch\n * @extends {stream.Writable}\n * @implements {Promise.<Array.<RecordResult>>}\n * @param {Bulk~Job} job - Bulk job object\n * @param {String} [batchId] - Batch ID (if already available)\n */\nvar Batch = function(job, batchId) {\n  Batch.super_.call(this, { objectMode: true });\n  this.job = job;\n  this.id = batchId;\n  this._bulk = job._bulk;\n  this._deferred = Promise.defer();\n  this._setupDataStreams();\n};\n\ninherits(Batch, stream.Writable);\n\n\n/**\n * @private\n */\nBatch.prototype._setupDataStreams = function() {\n  var batch = this;\n  var converterOptions = { nullValue : '#N/A' };\n  this._uploadStream = new RecordStream.Serializable();\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\n  this._downloadStream = new RecordStream.Parsable();\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\n\n  this.on('finish', function() {\n    batch._uploadStream.end();\n  });\n  this._uploadDataStream.once('readable', function() {\n    batch.job.open().then(function() {\n      // pipe upload data to batch API request stream\n      batch._uploadDataStream.pipe(batch._createRequestStream());\n    });\n  });\n\n  // duplex data stream, opened access to API programmers by Batch#stream()\n  var dataStream = this._dataStream = new Duplex();\n  dataStream._write = function(data, enc, cb) {\n    batch._uploadDataStream.write(data, enc, cb);\n  };\n  dataStream.on('finish', function() {\n    batch._uploadDataStream.end();\n  });\n\n  this._downloadDataStream.on('readable', function() {\n    dataStream.read(0);\n  });\n  this._downloadDataStream.on('end', function() {\n    dataStream.push(null);\n  });\n  dataStream._read = function(size) {\n    var chunk;\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\n      dataStream.push(chunk);\n    }\n  };\n};\n\n/**\n * Connect batch API and create stream instance of request/response\n *\n * @private\n * @returns {stream.Duplex}\n */\nBatch.prototype._createRequestStream = function() {\n  var batch = this;\n  var bulk = batch._bulk;\n  var logger = bulk._logger;\n\n  return bulk._request({\n    method : 'POST',\n    path : \"/job/\" + batch.job.id + \"/batch\",\n    headers: {\n      \"Content-Type\": \"text/csv\"\n    },\n    responseType: \"application/xml\"\n  }, function(err, res) {\n    if (err) {\n      batch.emit('error', err);\n    } else {\n      logger.debug(res.batchInfo);\n      batch.id = res.batchInfo.id;\n      batch.emit('queue', res.batchInfo);\n    }\n  }).stream();\n};\n\n/**\n * Implementation of Writable\n *\n * @override\n * @private\n */\nBatch.prototype._write = function(record, enc, cb) {\n  record = _.clone(record);\n  if (this.job.operation === \"insert\") {\n    delete record.Id;\n  } else if (this.job.operation === \"delete\") {\n    record = { Id: record.Id };\n  }\n  delete record.type;\n  delete record.attributes;\n  this._uploadStream.write(record, enc, cb);\n};\n\n/**\n * Returns duplex stream which accepts CSV data input and batch result output\n *\n * @returns {stream.Duplex}\n */\nBatch.prototype.stream = function() {\n  return this._dataStream;\n};\n\n/**\n * Execute batch operation\n *\n * @method Bulk~Batch#execute\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBatch.prototype.run =\nBatch.prototype.exec =\nBatch.prototype.execute = function(input, callback) {\n  var self = this;\n\n  if (typeof input === 'function') { // if input argument is omitted\n    callback = input;\n    input = null;\n  }\n\n  // if batch is already executed\n  if (this._result) {\n    throw new Error(\"Batch already executed.\");\n  }\n\n  var rdeferred = Promise.defer();\n  this._result = rdeferred.promise;\n  this._result.then(function(res) {\n    self._deferred.resolve(res);\n  }, function(err) {\n    self._deferred.reject(err);\n  });\n  this.once('response', function(res) {\n    rdeferred.resolve(res);\n  });\n  this.once('error', function(err) {\n    rdeferred.reject(err);\n  });\n\n  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface\n    input.pipe(this._dataStream);\n  } else {\n    var data;\n    if (_.isArray(input)) {\n      _.forEach(input, function(record) { self.write(record); });\n      self.end();\n    } else if (_.isString(input)){\n      data = input;\n      this._dataStream.write(data, 'utf8');\n      this._dataStream.end();\n    }\n  }\n\n  // return Batch instance for chaining\n  return this.thenCall(callback);\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Bulk~Batch#then\n */\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Bulk~Batch#thenCall\n */\nBatch.prototype.thenCall = function(callback) {\n  if (_.isFunction(callback)) {\n    this.then(function(res) {\n      process.nextTick(function() {\n        callback(null, res);\n      });\n    }, function(err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    });\n  }\n  return this;\n};\n\n/**\n * @typedef {Object} Bulk~BatchInfo\n * @prop {String} id - Batch ID\n * @prop {String} jobId - Job ID\n * @prop {String} state - Batch state\n * @prop {String} stateMessage - Batch state message\n */\n\n/**\n * Check the latest batch status in server\n *\n * @method Bulk~Batch#check\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~BatchInfo>}\n */\nBatch.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  return bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\n    responseType: \"application/xml\"\n  }).then(function(res) {\n    logger.debug(res.batchInfo);\n    return res.batchInfo;\n  }).thenCall(callback);\n};\n\n\n/**\n * Polling the batch result and retrieve\n *\n * @method Bulk~Batch#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nBatch.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\n      err.name = 'PollingTimeout';\n      self.emit('error', err);\n      return;\n    }\n    self.check(function(err, res) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        if (res.state === \"Failed\") {\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\n            self.retrieve();\n          } else {\n            self.emit('error', new Error(res.stateMessage));\n          }\n        } else if (res.state === \"Completed\") {\n          self.retrieve();\n        } else {\n          self.emit('progress', res);\n          setTimeout(poll, interval);\n        }\n      }\n    });\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * @typedef {Object} Bulk~BatchResultInfo\n * @prop {String} id - Batch result ID\n * @prop {String} batchId - Batch ID which includes this batch result.\n * @prop {String} jobId - Job ID which includes this batch result.\n */\n\n/**\n * Retrieve batch result\n *\n * @method Bulk~Batch#retrieve\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\n */\nBatch.prototype.retrieve = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var jobId = this.job.id;\n  var job = this.job;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return job.info().then(function(jobInfo) {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\n    });\n  }).then(function(res) {\n    var results;\n    if (job.operation === 'query') {\n      var conn = bulk._conn;\n      var resultIds = res['result-list'].result;\n      results = res['result-list'].result;\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\n        return {\n          id: id,\n          batchId: batchId,\n          jobId: jobId\n        };\n      });\n    } else {\n      results = _.map(res, function(ret) {\n        return {\n          id: ret.Id || null,\n          success: ret.Success === \"true\",\n          errors: ret.Error ? [ ret.Error ] : []\n        };\n      });\n    }\n    self.emit('response', results);\n    return results;\n  }).fail(function(err) {\n    self.emit('error', err);\n    throw err;\n  }).thenCall(callback);\n};\n\n/**\n * Fetch query result as a record stream\n * @param {String} resultId - Result id\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\n */\nBatch.prototype.result = function(resultId) {\n  var jobId = this.job.id;\n  var batchId = this.id;\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var resultStream = new RecordStream.Parsable();\n  var resultDataStream = resultStream.stream('csv');\n  var reqStream = this._bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId\n  }).stream().pipe(resultDataStream);\n  return resultStream;\n};\n\n/*--------------------------------------------*/\n/**\n * @private\n */\nvar BulkApi = function() {\n  BulkApi.super_.apply(this, arguments);\n};\n\ninherits(BulkApi, HttpApi);\n\nBulkApi.prototype.beforeSend = function(request) {\n  request.headers = request.headers || {};\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\n};\n\nBulkApi.prototype.isSessionExpired = function(response) {\n  return response.statusCode === 400 &&\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\n};\n\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\n  return !!body.error;\n};\n\nBulkApi.prototype.parseError = function(body) {\n  return {\n    errorCode: body.error.exceptionCode,\n    message: body.error.exceptionMessage\n  };\n};\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Bulk = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n};\n\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollTimeout = 10000;\n\n/** @private **/\nBulk.prototype._request = function(request, callback) {\n  var conn = this._conn;\n  request = _.clone(request);\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\n  request.url = baseUrl + request.path;\n  var options = { responseType: request.responseType };\n  delete request.path;\n  delete request.responseType;\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\n};\n\n/**\n * Create and start bulkload job and batch\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBulk.prototype.load = function(type, operation, options, input, callback) {\n  var self = this;\n  if (!type || !operation) {\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\n  }\n  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted\n    callback = input;\n    input = options;\n    options = null;\n  }\n  var job = this.createJob(type, operation, options);\n  job.once('error', function (error) {\n    if (batch) {\n      batch.emit('error', error); // pass job error to batch\n    }\n  });\n  var batch = job.createBatch();\n  var cleanup = function() {\n    batch = null;\n    job.close();\n  };\n  var cleanupOnError = function(err) {\n    if (err.name !== 'PollingTimeout') {\n      cleanup();\n    }\n  };\n  batch.on('response', cleanup);\n  batch.on('error', cleanupOnError);\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\n  return batch.execute(input, callback);\n};\n\n/**\n * Execute bulk query and get record stream\n *\n * @param {String} soql - SOQL to execute in bulk job\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\n */\nBulk.prototype.query = function(soql) {\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\n  if (!m) {\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\n  }\n  var type = m[1];\n  var self = this;\n  var recordStream = new RecordStream.Parsable();\n  var dataStream = recordStream.stream('csv');\n  this.load(type, \"query\", soql).then(function(results) {\n    var streams = results.map(function(result) {\n      return self\n        .job(result.jobId)\n        .batch(result.batchId)\n        .result(result.id)\n        .stream();\n    });\n\n    joinStreams(streams).pipe(dataStream);\n  }).fail(function(err) {\n    recordStream.emit('error', err);\n  });\n  return recordStream;\n};\n\n\n/**\n * Create a new job instance\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\n * @param {Object} [options] - Options for bulk loading operation\n * @returns {Bulk~Job}\n */\nBulk.prototype.createJob = function(type, operation, options) {\n  return new Job(this, type, operation, options);\n};\n\n/**\n * Get a job instance specified by given job ID\n *\n * @param {String} jobId - Job ID\n * @returns {Bulk~Job}\n */\nBulk.prototype.job = function(jobId) {\n  return new Job(this, null, null, null, jobId);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.bulk = new Bulk(conn);\n});\n\n\nmodule.exports = Bulk;\n\n}).call(this,require('_process'))\n\n},{\"_process\":9,\"multistream\":11}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\n(function (global){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var foundIndex = -1\n  for (var i = 0; byteOffset + i < arrLength; i++) {\n    if (read(arr, byteOffset + i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n      if (foundIndex === -1) foundIndex = i\n      if (i - foundIndex + 1 === valLength) return (byteOffset + foundIndex) * indexSize\n    } else {\n      if (foundIndex !== -1) i -= i - foundIndex\n      foundIndex = -1\n    }\n  }\n  return -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  if (Buffer.isBuffer(val)) {\n    // special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(this, val, byteOffset, encoding)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset, encoding)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; i++) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"base64-js\":4,\"ieee754\":5,\"isarray\":6}],4:[function(require,module,exports){\n'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i]\n    revLookup[code.charCodeAt(i)] = i\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n},{}],5:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],6:[function(require,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n},{}],7:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],8:[function(require,module,exports){\n/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n * `npm install is-buffer`\n */\n\nmodule.exports = function (obj) {\n  return !!(obj != null &&\n    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)\n      (obj.constructor &&\n      typeof obj.constructor.isBuffer === 'function' &&\n      obj.constructor.isBuffer(obj))\n    ))\n}\n\n},{}],9:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],10:[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],11:[function(require,module,exports){\nmodule.exports = MultiStream\n\nvar inherits = require('inherits')\nvar stream = require('readable-stream')\n\ninherits(MultiStream, stream.Readable)\n\nfunction MultiStream (streams, opts) {\n  if (!(this instanceof MultiStream)) return new MultiStream(streams, opts)\n  stream.Readable.call(this, opts)\n\n  this.destroyed = false\n\n  this._drained = false\n  this._forwarding = false\n  this._current = null\n  this._queue = (typeof streams === 'function' ? streams : streams.map(toStreams2))\n\n  this._next()\n}\n\nMultiStream.obj = function (streams) {\n  return new MultiStream(streams, { objectMode: true, highWaterMark: 16 })\n}\n\nMultiStream.prototype._read = function () {\n  this._drained = true\n  this._forward()\n}\n\nMultiStream.prototype._forward = function () {\n  if (this._forwarding || !this._drained || !this._current) return\n  this._forwarding = true\n\n  var chunk\n  while ((chunk = this._current.read()) !== null) {\n    this._drained = this.push(chunk)\n  }\n\n  this._forwarding = false\n}\n\nMultiStream.prototype.destroy = function (err) {\n  if (this.destroyed) return\n  this.destroyed = true\n\n  if (this._current && this._current.destroy) this._current.destroy()\n  if (typeof this._queue !== 'function') {\n    this._queue.forEach(function (stream) {\n      if (stream.destroy) stream.destroy()\n    })\n  }\n\n  if (err) this.emit('error', err)\n  this.emit('close')\n}\n\nMultiStream.prototype._next = function () {\n  var self = this\n  self._current = null\n\n  if (typeof self._queue === 'function') {\n    self._queue(function (err, stream) {\n      if (err) return self.destroy(err)\n      self._gotNextStream(toStreams2(stream))\n    })\n  } else {\n    var stream = self._queue.shift()\n    if (typeof stream === 'function') stream = toStreams2(stream())\n    self._gotNextStream(stream)\n  }\n}\n\nMultiStream.prototype._gotNextStream = function (stream) {\n  var self = this\n\n  if (!stream) {\n    self.push(null)\n    self.destroy()\n    return\n  }\n\n  self._current = stream\n  self._forward()\n\n  stream.on('readable', onReadable)\n  stream.on('end', onEnd)\n  stream.on('error', onError)\n  stream.on('close', onClose)\n\n  function onReadable () {\n    self._forward()\n  }\n\n  function onClose () {\n    if (!stream._readableState.ended) {\n      self.destroy()\n    }\n  }\n\n  function onEnd () {\n    self._current = null\n    stream.removeListener('readable', onReadable)\n    stream.removeListener('end', onEnd)\n    stream.removeListener('error', onError)\n    stream.removeListener('close', onClose)\n    self._next()\n  }\n\n  function onError (err) {\n    self.destroy(err)\n  }\n}\n\nfunction toStreams2 (s) {\n  if (!s || typeof s === 'function' || s._readableState) return s\n\n  var wrap = new stream.Readable().wrap(s)\n  if (s.destroy) {\n    wrap.destroy = s.destroy.bind(s)\n  }\n  return wrap\n}\n\n},{\"inherits\":10,\"readable-stream\":22}],12:[function(require,module,exports){\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = objectKeys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  processNextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n},{\"./_stream_readable\":14,\"./_stream_writable\":16,\"core-util-is\":17,\"inherits\":10,\"process-nextick-args\":19}],13:[function(require,module,exports){\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n},{\"./_stream_transform\":15,\"core-util-is\":17,\"inherits\":10}],14:[function(require,module,exports){\n(function (process){\n'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events');\n\n/*<replacement>*/\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = undefined;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar Duplex;\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nvar Duplex;\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n\n  if (state.objectMode) return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n <= 0) return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else {\n      return state.length;\n    }\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended) state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && !this._readableState.endEmitted) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0) return null;\n\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n}).call(this,require('_process'))\n\n},{\"./_stream_duplex\":12,\"_process\":9,\"buffer\":3,\"core-util-is\":17,\"events\":7,\"inherits\":10,\"isarray\":18,\"process-nextick-args\":19,\"string_decoder/\":20,\"util\":2}],15:[function(require,module,exports){\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er) {\n      done(stream, er);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er) {\n  if (er) return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}\n},{\"./_stream_duplex\":12,\"core-util-is\":17,\"inherits\":10}],16:[function(require,module,exports){\n(function (process){\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nvar Duplex;\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // create the two objects needed to store the corked requests\n  // they are not a linked list, as no new elements are inserted in there\n  this.corkedRequestsFree = new CorkedRequest(this);\n  this.corkedRequestsFree.next = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function writableStateGetBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n    });\n  } catch (_) {}\n})();\n\nvar Duplex;\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  processNextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    processNextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) processNextTick(cb, er);else cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n        afterWrite(stream, state, finished, cb);\n      }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    state.corkedRequestsFree = holder.next;\n    holder.next = null;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) processNextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function (err) {\n    var entry = _this.entry;\n    _this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = _this;\n    } else {\n      state.corkedRequestsFree = _this;\n    }\n  };\n}\n}).call(this,require('_process'))\n\n},{\"./_stream_duplex\":12,\"_process\":9,\"buffer\":3,\"core-util-is\":17,\"events\":7,\"inherits\":10,\"process-nextick-args\":19,\"util-deprecate\":21}],17:[function(require,module,exports){\n(function (Buffer){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n}).call(this,{\"isBuffer\":require(\"../../../../browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js\")})\n\n},{\"../../../../browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js\":8}],18:[function(require,module,exports){\narguments[4][6][0].apply(exports,arguments)\n},{\"dup\":6}],19:[function(require,module,exports){\n(function (process){\n'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = nextTick;\n} else {\n  module.exports = process.nextTick;\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"_process\":9}],20:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n\n},{\"buffer\":3}],21:[function(require,module,exports){\n(function (global){\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],22:[function(require,module,exports){\n(function (process){\nvar Stream = (function (){\n  try {\n    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify\n  } catch(_){}\n}());\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = Stream || exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\nif (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream;\n}\n\n}).call(this,require('_process'))\n\n},{\"./lib/_stream_duplex.js\":12,\"./lib/_stream_passthrough.js\":13,\"./lib/_stream_readable.js\":14,\"./lib/_stream_transform.js\":15,\"./lib/_stream_writable.js\":16,\"_process\":9}]},{},[1])(1)\n});\n\n","/*global process*/\n/**\n * @file Manages Salesforce Bulk API related operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits     = window.jsforce.require('inherits'),\n    stream       = window.jsforce.require('readable-stream'),\n    Duplex       = stream.Duplex,\n    events       = window.jsforce.require('events'),\n    _            = window.jsforce.require('lodash/core'),\n    jsforce      = window.jsforce.require('./core'),\n    RecordStream = window.jsforce.require('./record-stream'),\n    CSV          = window.jsforce.require('./csv'),\n    Promise      = window.jsforce.require('./promise'),\n    HttpApi      = window.jsforce.require('./http-api'),\n    joinStreams  = require('multistream');\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API Job\n *\n * @protected\n * @class Bulk~Job\n * @extends events.EventEmitter\n *\n * @param {Bulk} bulk - Bulk API object\n * @param {String} [type] - SObject type\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {String} [jobId] - Job ID (if already available)\n */\nvar Job = function(bulk, type, operation, options, jobId) {\n  this._bulk = bulk;\n  this.type = type;\n  this.operation = operation;\n  this.options = options || {};\n  this.id = jobId;\n  this.state = this.id ? 'Open' : 'Unknown';\n  this._batches = {};\n};\n\ninherits(Job, events.EventEmitter);\n\n/**\n * @typedef {Object} Bulk~JobInfo\n * @prop {String} id - Job ID\n * @prop {String} object - Object type name\n * @prop {String} operation - Operation type of the job\n * @prop {String} state - Job status\n */\n\n/**\n * Return latest jobInfo from cache\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.info = function(callback) {\n  var self = this;\n  // if cache is not available, check the latest\n  if (!this._jobInfo) {\n    this._jobInfo = this.check();\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Open new job and get jobinfo\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.open = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  // if not requested opening job\n  if (!this._jobInfo) {\n    var operation = this.operation.toLowerCase();\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<operation>' + operation + '</operation>',\n        '<object>' + this.type + '</object>',\n        (this.options.extIdField ?\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\n         ''),\n        (this.options.concurrencyMode ?\n         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :\n         ''),\n        (this.options.assignmentRuleId ?\n          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :\n          ''),\n        '<contentType>CSV</contentType>',\n      '</jobInfo>'\n    ].join('');\n\n    this._jobInfo = bulk._request({\n      method : 'POST',\n      path : \"/job\",\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    }).then(function(res) {\n      self.emit(\"open\", res.jobInfo);\n      self.id = res.jobInfo.id;\n      self.state = res.jobInfo.state;\n      return res.jobInfo;\n    }, function(err) {\n      self.emit(\"error\", err);\n      throw err;\n    });\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Create a new batch instance in the job\n *\n * @method Bulk~Job#createBatch\n * @returns {Bulk~Batch}\n */\nJob.prototype.createBatch = function() {\n  var batch = new Batch(this);\n  var self = this;\n  batch.on('queue', function() {\n    self._batches[batch.id] = batch;\n  });\n  return batch;\n};\n\n/**\n * Get a batch instance specified by given batch ID\n *\n * @method Bulk~Job#batch\n * @param {String} batchId - Batch ID\n * @returns {Bulk~Batch}\n */\nJob.prototype.batch = function(batchId) {\n  var batch = this._batches[batchId];\n  if (!batch) {\n    batch = new Batch(this, batchId);\n    this._batches[batchId] = batch;\n  }\n  return batch;\n};\n\n/**\n * Check the latest job status from server\n *\n * @method Bulk~Job#check\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id,\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.id = res.jobInfo.id;\n    self.type = res.jobInfo.object;\n    self.operation = res.jobInfo.operation;\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Wait till the job is assigned to server\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype._waitAssign = function(callback) {\n  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);\n};\n\n\n/**\n * List all registered batch info in job\n *\n * @method Bulk~Job#list\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\n */\nJob.prototype.list = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  return this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id + \"/batch\",\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.batchInfoList.batchInfo);\n    var batchInfoList = res.batchInfoList;\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\n    return batchInfoList;\n  }).thenCall(callback);\n\n};\n\n/**\n * Close opened job\n *\n * @method Bulk~Job#close\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.close = function() {\n  var self = this;\n  return this._changeState(\"Closed\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"close\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * Set the status to abort\n *\n * @method Bulk~Job#abort\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.abort = function() {\n  var self = this;\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"abort\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * @private\n */\nJob.prototype._changeState = function(state, callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<state>' + state + '</state>',\n      '</jobInfo>'\n    ].join('');\n    return bulk._request({\n      method : 'POST',\n      path : \"/job/\" + self.id,\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * Batch (extends RecordStream)\n *\n * @protected\n * @class Bulk~Batch\n * @extends {stream.Writable}\n * @implements {Promise.<Array.<RecordResult>>}\n * @param {Bulk~Job} job - Bulk job object\n * @param {String} [batchId] - Batch ID (if already available)\n */\nvar Batch = function(job, batchId) {\n  Batch.super_.call(this, { objectMode: true });\n  this.job = job;\n  this.id = batchId;\n  this._bulk = job._bulk;\n  this._deferred = Promise.defer();\n  this._setupDataStreams();\n};\n\ninherits(Batch, stream.Writable);\n\n\n/**\n * @private\n */\nBatch.prototype._setupDataStreams = function() {\n  var batch = this;\n  var converterOptions = { nullValue : '#N/A' };\n  this._uploadStream = new RecordStream.Serializable();\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\n  this._downloadStream = new RecordStream.Parsable();\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\n\n  this.on('finish', function() {\n    batch._uploadStream.end();\n  });\n  this._uploadDataStream.once('readable', function() {\n    batch.job.open().then(function() {\n      // pipe upload data to batch API request stream\n      batch._uploadDataStream.pipe(batch._createRequestStream());\n    });\n  });\n\n  // duplex data stream, opened access to API programmers by Batch#stream()\n  var dataStream = this._dataStream = new Duplex();\n  dataStream._write = function(data, enc, cb) {\n    batch._uploadDataStream.write(data, enc, cb);\n  };\n  dataStream.on('finish', function() {\n    batch._uploadDataStream.end();\n  });\n\n  this._downloadDataStream.on('readable', function() {\n    dataStream.read(0);\n  });\n  this._downloadDataStream.on('end', function() {\n    dataStream.push(null);\n  });\n  dataStream._read = function(size) {\n    var chunk;\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\n      dataStream.push(chunk);\n    }\n  };\n};\n\n/**\n * Connect batch API and create stream instance of request/response\n *\n * @private\n * @returns {stream.Duplex}\n */\nBatch.prototype._createRequestStream = function() {\n  var batch = this;\n  var bulk = batch._bulk;\n  var logger = bulk._logger;\n\n  return bulk._request({\n    method : 'POST',\n    path : \"/job/\" + batch.job.id + \"/batch\",\n    headers: {\n      \"Content-Type\": \"text/csv\"\n    },\n    responseType: \"application/xml\"\n  }, function(err, res) {\n    if (err) {\n      batch.emit('error', err);\n    } else {\n      logger.debug(res.batchInfo);\n      batch.id = res.batchInfo.id;\n      batch.emit('queue', res.batchInfo);\n    }\n  }).stream();\n};\n\n/**\n * Implementation of Writable\n *\n * @override\n * @private\n */\nBatch.prototype._write = function(record, enc, cb) {\n  record = _.clone(record);\n  if (this.job.operation === \"insert\") {\n    delete record.Id;\n  } else if (this.job.operation === \"delete\") {\n    record = { Id: record.Id };\n  }\n  delete record.type;\n  delete record.attributes;\n  this._uploadStream.write(record, enc, cb);\n};\n\n/**\n * Returns duplex stream which accepts CSV data input and batch result output\n *\n * @returns {stream.Duplex}\n */\nBatch.prototype.stream = function() {\n  return this._dataStream;\n};\n\n/**\n * Execute batch operation\n *\n * @method Bulk~Batch#execute\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBatch.prototype.run =\nBatch.prototype.exec =\nBatch.prototype.execute = function(input, callback) {\n  var self = this;\n\n  if (typeof input === 'function') { // if input argument is omitted\n    callback = input;\n    input = null;\n  }\n\n  // if batch is already executed\n  if (this._result) {\n    throw new Error(\"Batch already executed.\");\n  }\n\n  var rdeferred = Promise.defer();\n  this._result = rdeferred.promise;\n  this._result.then(function(res) {\n    self._deferred.resolve(res);\n  }, function(err) {\n    self._deferred.reject(err);\n  });\n  this.once('response', function(res) {\n    rdeferred.resolve(res);\n  });\n  this.once('error', function(err) {\n    rdeferred.reject(err);\n  });\n\n  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface\n    input.pipe(this._dataStream);\n  } else {\n    var data;\n    if (_.isArray(input)) {\n      _.forEach(input, function(record) { self.write(record); });\n      self.end();\n    } else if (_.isString(input)){\n      data = input;\n      this._dataStream.write(data, 'utf8');\n      this._dataStream.end();\n    }\n  }\n\n  // return Batch instance for chaining\n  return this.thenCall(callback);\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Bulk~Batch#then\n */\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Bulk~Batch#thenCall\n */\nBatch.prototype.thenCall = function(callback) {\n  if (_.isFunction(callback)) {\n    this.then(function(res) {\n      process.nextTick(function() {\n        callback(null, res);\n      });\n    }, function(err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    });\n  }\n  return this;\n};\n\n/**\n * @typedef {Object} Bulk~BatchInfo\n * @prop {String} id - Batch ID\n * @prop {String} jobId - Job ID\n * @prop {String} state - Batch state\n * @prop {String} stateMessage - Batch state message\n */\n\n/**\n * Check the latest batch status in server\n *\n * @method Bulk~Batch#check\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~BatchInfo>}\n */\nBatch.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  return bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\n    responseType: \"application/xml\"\n  }).then(function(res) {\n    logger.debug(res.batchInfo);\n    return res.batchInfo;\n  }).thenCall(callback);\n};\n\n\n/**\n * Polling the batch result and retrieve\n *\n * @method Bulk~Batch#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nBatch.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\n      err.name = 'PollingTimeout';\n      self.emit('error', err);\n      return;\n    }\n    self.check(function(err, res) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        if (res.state === \"Failed\") {\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\n            self.retrieve();\n          } else {\n            self.emit('error', new Error(res.stateMessage));\n          }\n        } else if (res.state === \"Completed\") {\n          self.retrieve();\n        } else {\n          self.emit('progress', res);\n          setTimeout(poll, interval);\n        }\n      }\n    });\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * @typedef {Object} Bulk~BatchResultInfo\n * @prop {String} id - Batch result ID\n * @prop {String} batchId - Batch ID which includes this batch result.\n * @prop {String} jobId - Job ID which includes this batch result.\n */\n\n/**\n * Retrieve batch result\n *\n * @method Bulk~Batch#retrieve\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\n */\nBatch.prototype.retrieve = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var jobId = this.job.id;\n  var job = this.job;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return job.info().then(function(jobInfo) {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\n    });\n  }).then(function(res) {\n    var results;\n    if (job.operation === 'query') {\n      var conn = bulk._conn;\n      var resultIds = res['result-list'].result;\n      results = res['result-list'].result;\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\n        return {\n          id: id,\n          batchId: batchId,\n          jobId: jobId\n        };\n      });\n    } else {\n      results = _.map(res, function(ret) {\n        return {\n          id: ret.Id || null,\n          success: ret.Success === \"true\",\n          errors: ret.Error ? [ ret.Error ] : []\n        };\n      });\n    }\n    self.emit('response', results);\n    return results;\n  }).fail(function(err) {\n    self.emit('error', err);\n    throw err;\n  }).thenCall(callback);\n};\n\n/**\n * Fetch query result as a record stream\n * @param {String} resultId - Result id\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\n */\nBatch.prototype.result = function(resultId) {\n  var jobId = this.job.id;\n  var batchId = this.id;\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var resultStream = new RecordStream.Parsable();\n  var resultDataStream = resultStream.stream('csv');\n  var reqStream = this._bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId\n  }).stream().pipe(resultDataStream);\n  return resultStream;\n};\n\n/*--------------------------------------------*/\n/**\n * @private\n */\nvar BulkApi = function() {\n  BulkApi.super_.apply(this, arguments);\n};\n\ninherits(BulkApi, HttpApi);\n\nBulkApi.prototype.beforeSend = function(request) {\n  request.headers = request.headers || {};\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\n};\n\nBulkApi.prototype.isSessionExpired = function(response) {\n  return response.statusCode === 400 &&\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\n};\n\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\n  return !!body.error;\n};\n\nBulkApi.prototype.parseError = function(body) {\n  return {\n    errorCode: body.error.exceptionCode,\n    message: body.error.exceptionMessage\n  };\n};\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Bulk = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n};\n\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollTimeout = 10000;\n\n/** @private **/\nBulk.prototype._request = function(request, callback) {\n  var conn = this._conn;\n  request = _.clone(request);\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\n  request.url = baseUrl + request.path;\n  var options = { responseType: request.responseType };\n  delete request.path;\n  delete request.responseType;\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\n};\n\n/**\n * Create and start bulkload job and batch\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBulk.prototype.load = function(type, operation, options, input, callback) {\n  var self = this;\n  if (!type || !operation) {\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\n  }\n  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted\n    callback = input;\n    input = options;\n    options = null;\n  }\n  var job = this.createJob(type, operation, options);\n  job.once('error', function (error) {\n    if (batch) {\n      batch.emit('error', error); // pass job error to batch\n    }\n  });\n  var batch = job.createBatch();\n  var cleanup = function() {\n    batch = null;\n    job.close();\n  };\n  var cleanupOnError = function(err) {\n    if (err.name !== 'PollingTimeout') {\n      cleanup();\n    }\n  };\n  batch.on('response', cleanup);\n  batch.on('error', cleanupOnError);\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\n  return batch.execute(input, callback);\n};\n\n/**\n * Execute bulk query and get record stream\n *\n * @param {String} soql - SOQL to execute in bulk job\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\n */\nBulk.prototype.query = function(soql) {\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\n  if (!m) {\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\n  }\n  var type = m[1];\n  var self = this;\n  var recordStream = new RecordStream.Parsable();\n  var dataStream = recordStream.stream('csv');\n  this.load(type, \"query\", soql).then(function(results) {\n    var streams = results.map(function(result) {\n      return self\n        .job(result.jobId)\n        .batch(result.batchId)\n        .result(result.id)\n        .stream();\n    });\n\n    joinStreams(streams).pipe(dataStream);\n  }).fail(function(err) {\n    recordStream.emit('error', err);\n  });\n  return recordStream;\n};\n\n\n/**\n * Create a new job instance\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\n * @param {Object} [options] - Options for bulk loading operation\n * @returns {Bulk~Job}\n */\nBulk.prototype.createJob = function(type, operation, options) {\n  return new Job(this, type, operation, options);\n};\n\n/**\n * Get a job instance specified by given job ID\n *\n * @param {String} jobId - Job ID\n * @returns {Bulk~Job}\n */\nBulk.prototype.job = function(jobId) {\n  return new Job(this, null, null, null, jobId);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.bulk = new Bulk(conn);\n});\n\n\nmodule.exports = Bulk;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var foundIndex = -1\n  for (var i = 0; byteOffset + i < arrLength; i++) {\n    if (read(arr, byteOffset + i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n      if (foundIndex === -1) foundIndex = i\n      if (i - foundIndex + 1 === valLength) return (byteOffset + foundIndex) * indexSize\n    } else {\n      if (foundIndex !== -1) i -= i - foundIndex\n      foundIndex = -1\n    }\n  }\n  return -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  if (Buffer.isBuffer(val)) {\n    // special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(this, val, byteOffset, encoding)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset, encoding)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; i++) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i]\n    revLookup[code.charCodeAt(i)] = i\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n * `npm install is-buffer`\n */\n\nmodule.exports = function (obj) {\n  return !!(obj != null &&\n    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)\n      (obj.constructor &&\n      typeof obj.constructor.isBuffer === 'function' &&\n      obj.constructor.isBuffer(obj))\n    ))\n}\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = MultiStream\n\nvar inherits = require('inherits')\nvar stream = require('readable-stream')\n\ninherits(MultiStream, stream.Readable)\n\nfunction MultiStream (streams, opts) {\n  if (!(this instanceof MultiStream)) return new MultiStream(streams, opts)\n  stream.Readable.call(this, opts)\n\n  this.destroyed = false\n\n  this._drained = false\n  this._forwarding = false\n  this._current = null\n  this._queue = (typeof streams === 'function' ? streams : streams.map(toStreams2))\n\n  this._next()\n}\n\nMultiStream.obj = function (streams) {\n  return new MultiStream(streams, { objectMode: true, highWaterMark: 16 })\n}\n\nMultiStream.prototype._read = function () {\n  this._drained = true\n  this._forward()\n}\n\nMultiStream.prototype._forward = function () {\n  if (this._forwarding || !this._drained || !this._current) return\n  this._forwarding = true\n\n  var chunk\n  while ((chunk = this._current.read()) !== null) {\n    this._drained = this.push(chunk)\n  }\n\n  this._forwarding = false\n}\n\nMultiStream.prototype.destroy = function (err) {\n  if (this.destroyed) return\n  this.destroyed = true\n\n  if (this._current && this._current.destroy) this._current.destroy()\n  if (typeof this._queue !== 'function') {\n    this._queue.forEach(function (stream) {\n      if (stream.destroy) stream.destroy()\n    })\n  }\n\n  if (err) this.emit('error', err)\n  this.emit('close')\n}\n\nMultiStream.prototype._next = function () {\n  var self = this\n  self._current = null\n\n  if (typeof self._queue === 'function') {\n    self._queue(function (err, stream) {\n      if (err) return self.destroy(err)\n      self._gotNextStream(toStreams2(stream))\n    })\n  } else {\n    var stream = self._queue.shift()\n    if (typeof stream === 'function') stream = toStreams2(stream())\n    self._gotNextStream(stream)\n  }\n}\n\nMultiStream.prototype._gotNextStream = function (stream) {\n  var self = this\n\n  if (!stream) {\n    self.push(null)\n    self.destroy()\n    return\n  }\n\n  self._current = stream\n  self._forward()\n\n  stream.on('readable', onReadable)\n  stream.on('end', onEnd)\n  stream.on('error', onError)\n  stream.on('close', onClose)\n\n  function onReadable () {\n    self._forward()\n  }\n\n  function onClose () {\n    if (!stream._readableState.ended) {\n      self.destroy()\n    }\n  }\n\n  function onEnd () {\n    self._current = null\n    stream.removeListener('readable', onReadable)\n    stream.removeListener('end', onEnd)\n    stream.removeListener('error', onError)\n    stream.removeListener('close', onClose)\n    self._next()\n  }\n\n  function onError (err) {\n    self.destroy(err)\n  }\n}\n\nfunction toStreams2 (s) {\n  if (!s || typeof s === 'function' || s._readableState) return s\n\n  var wrap = new stream.Readable().wrap(s)\n  if (s.destroy) {\n    wrap.destroy = s.destroy.bind(s)\n  }\n  return wrap\n}\n","// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = objectKeys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  processNextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}","// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events');\n\n/*<replacement>*/\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = undefined;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar Duplex;\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nvar Duplex;\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n\n  if (state.objectMode) return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n <= 0) return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else {\n      return state.length;\n    }\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended) state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && !this._readableState.endEmitted) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0) return null;\n\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er) {\n      done(stream, er);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er) {\n  if (er) return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}","// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nvar Duplex;\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // create the two objects needed to store the corked requests\n  // they are not a linked list, as no new elements are inserted in there\n  this.corkedRequestsFree = new CorkedRequest(this);\n  this.corkedRequestsFree.next = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function writableStateGetBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n    });\n  } catch (_) {}\n})();\n\nvar Duplex;\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  processNextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    processNextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) processNextTick(cb, er);else cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n        afterWrite(stream, state, finished, cb);\n      }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    state.corkedRequestsFree = holder.next;\n    holder.next = null;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) processNextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function (err) {\n    var entry = _this.entry;\n    _this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = _this;\n    } else {\n      state.corkedRequestsFree = _this;\n    }\n  };\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = nextTick;\n} else {\n  module.exports = process.nextTick;\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n","var Stream = (function (){\n  try {\n    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify\n  } catch(_){}\n}());\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = Stream || exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\nif (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream;\n}\n"],"sourceRoot":"/source/"}