{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/api/tooling.js","jsforce-api-tooling.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Tooling","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_","Cache","conn","_conn","_logger","forEach","method","constructor","prototype","cache","cacheOptions","key","type","describe$","makeCacheable","describe","makeResponseCacheable","describeSObject$","describeSObject","describeGlobal$","describeGlobal","initialize","sobjects","clear","get","removeAllListeners","on","bind","res","result","map","so","name","sobject","_baseUrl","_supports","feature","apply","arguments","request","executeAnonymous","body","callback","url","encodeURIComponent","thenCall","runTestsAsynchronous","classids","requestPost","join","undefined","runTestsSynchronous","classnames","completions","isString","tooling"],"mappings":"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","file":"jsforce-api-tooling.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * @file Manages Tooling APIs\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar jsforce = window.jsforce.require('./core'),\n    _     = window.jsforce.require('lodash/core'),\n    Cache = window.jsforce.require('./cache');\n\n/**\n * API class for Tooling API call\n *\n * @class\n * @param {Connection} conn - Connection\n */\nvar Tooling = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n  var delegates = [\n    \"query\",\n    \"queryMore\",\n    \"_toRecordResult\",\n    \"create\",\n    \"_createSingle\",\n    \"_createParallel\",\n    \"_createMany\",\n    \"insert\",\n    \"retrieve\",\n    \"_retrieveSingle\",\n    \"_retrieveParallel\",\n    \"_retrieveMany\",\n    \"update\",\n    \"_updateSingle\",\n    \"_updateParallel\",\n    \"_updateMany\",\n    \"upsert\",\n    \"del\",\n    \"delete\",\n    \"destroy\",\n    \"_destroySingle\",\n    \"_destroyParallel\",\n    \"_destroyMany\",\n    \"describe\",\n    \"describeGlobal\",\n    \"sobject\"\n  ];\n  delegates.forEach(function(method) {\n    this[method] = conn.constructor.prototype[method];\n  }, this);\n\n  this.cache = new Cache();\n\n  var cacheOptions = {\n    key: function(type) { return type ? \"describe.\" + type : \"describe\"; }\n  };\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\n  this.describeSObject$ = this.describe$;\n  this.describeSObject = this.describe;\n\n  cacheOptions = { key: 'describeGlobal' };\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\n\n  this.initialize();\n};\n\n/**\n * Initialize tooling API\n * @protected\n */\nTooling.prototype.initialize = function() {\n  this.sobjects = {};\n  this.cache.clear();\n  this.cache.get('describeGlobal').removeAllListeners('value');\n  this.cache.get('describeGlobal').on('value', _.bind(function(res) {\n    if (res.result) {\n      var types = _.map(res.result.sobjects, function(so) { return so.name; });\n      types.forEach(this.sobject, this);\n    }\n  }, this));\n};\n\n/**\n * @private\n */\nTooling.prototype._baseUrl = function() {\n  return this._conn._baseUrl() + \"/tooling\";\n};\n\n/**\n * @private\n */\nTooling.prototype._supports = function(feature) {\n  // should return false in order not to use compsite collection\n  if (feature === 'sobject-collection') {\n    return false;\n  }\n  return this._conn._supports.apply(this._conn, arguments);\n};\n\n/**\n * @private\n */\nTooling.prototype.request = function() {\n  return this._conn.request.apply(this._conn, arguments);\n};\n\n/**\n * Execute query by using SOQL\n *\n * @param {String} soql - SOQL string\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n/**\n * Query next record set by using query locator\n *\n * @method Tooling#query\n * @param {String} locator - Next record set locator\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n/**\n * Retrieve specified records\n *\n * @method Tooling#queryMore\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\n * @returns {Promise.<Record|Array.<Record>>}\n */\n\n/**\n * Synonym of Tooling#create()\n *\n * @method Tooling#insert\n * @param {String} type - SObject Type\n * @param {Object|Array.<Object>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Create records\n *\n * @method Tooling#create\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Update records\n *\n * @method Tooling#update\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to update\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Upsert records\n *\n * @method Tooling#upsert\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\n * @param {String} extIdField - External ID field name\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#destroy()\n *\n * @method Tooling#delete\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Synonym of Tooling#destroy()\n *\n * @method Tooling#del\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Delete records\n *\n * @method Tooling#destroy\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#describe()\n *\n * @method Tooling#describeSObject\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n/**\n * Describe SObject metadata\n *\n * @method Tooling#describe\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n\n/**\n * Describe global SObjects\n *\n * @method Tooling#describeGlobal\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\n * @returns {Promise.<DescribeGlobalResult>}\n */\n\n/**\n * Get SObject instance\n *\n * @method Tooling#sobject\n * @param {String} type - SObject Type\n * @returns {SObject}\n */\n\n/**\n * @typedef {Object} Tooling~ExecuteAnonymousResult\n * @prop {Boolean} compiled - Flag if the query is compiled successfully\n * @prop {String} compileProblem - Error reason in compilation\n * @prop {Boolean} success - Flag if the code is executed successfully\n * @prop {Number} line - Line number for the error\n * @prop {Number} column - Column number for the error\n * @prop {String} exceptionMessage - Exception message\n * @prop {String} exceptionStackTrace - Exception stack trace\n */\n/**\n * Executes Apex code anonymously\n *\n * @param {String} body - Anonymous Apex code\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\nTooling.prototype.executeAnonymous = function(body, callback) {\n  var url = this._baseUrl() + \"/executeAnonymous?anonymousBody=\" + encodeURIComponent(body);\n  return this.request(url).thenCall(callback);\n};\n\n/**\n * Executes Apex tests asynchronously\n *\n * @param {Array.<String>} classids - Comma separated list of class IDs\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\nTooling.prototype.runTestsAsynchronous = function(classids, callback) {\n  var url = this._baseUrl() + \"/runTestsAsynchronous/\";\n  return this._conn.requestPost(url, {classids : classids.join(',')}, undefined, callback);\n};\n\n/**\n * Executes Apex tests synchronously\n *\n * @param {Array.<String>} classnames - Comma separated list of class Names\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\nTooling.prototype.runTestsSynchronous = function(classnames, callback) {\n  var url = this._baseUrl() + \"/runTestsSynchronous/\";\n  return this._conn.requestPost(url, {classnames : classnames.join(',')}, undefined, callback);\n};\n\n/**\n * @typedef {Object} Tooling~CompletionsResult\n * @prop {Object} publicDeclarations\n */\n/**\n * Retrieves available code completions of the referenced type\n *\n * @param {String} [type] - completion type (default 'apex')\n * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~CompletionsResult>}\n */\nTooling.prototype.completions = function(type, callback) {\n  if (!_.isString(type)) {\n    callback = type;\n    type = 'apex';\n  }\n  var url = this._baseUrl() + \"/completions?type=\" + encodeURIComponent(type);\n  return this.request(url).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.tooling = new Tooling(conn);\n});\n\n\nmodule.exports = Tooling;\n","!function(e){var t;\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):(t=(t=(t=(t=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).jsforce||(t.jsforce={})).modules||(t.modules={})).api||(t.api={})).Tooling=e()}(function(){return function s(i,c,a){function u(t,e){if(!c[t]){if(!i[t]){var o=\"function\"==typeof require&&require;if(!e&&o)return o(t,!0);if(l)return l(t,!0);var r=new Error(\"Cannot find module '\"+t+\"'\");throw r.code=\"MODULE_NOT_FOUND\",r}var n=c[t]={exports:{}};i[t][0].call(n.exports,function(e){return u(i[t][1][e]||e)},n,n.exports,s,i,c,a)}return c[t].exports}for(var l=\"function\"==typeof require&&require,e=0;e<a.length;e++)u(a[e]);return u}({1:[function(e,t,o){\"use strict\";function r(t){this._conn=t,this._logger=t._logger,[\"query\",\"queryMore\",\"_toRecordResult\",\"create\",\"_createSingle\",\"_createParallel\",\"_createMany\",\"insert\",\"retrieve\",\"_retrieveSingle\",\"_retrieveParallel\",\"_retrieveMany\",\"update\",\"_updateSingle\",\"_updateParallel\",\"_updateMany\",\"upsert\",\"del\",\"delete\",\"destroy\",\"_destroySingle\",\"_destroyParallel\",\"_destroyMany\",\"describe\",\"describeGlobal\",\"sobject\"].forEach(function(e){this[e]=t.constructor.prototype[e]},this),this.cache=new i;var e={key:function(e){return e?\"describe.\"+e:\"describe\"}};this.describe$=this.cache.makeCacheable(this.describe,this,e),this.describe=this.cache.makeResponseCacheable(this.describe,this,e),this.describeSObject$=this.describe$,this.describeSObject=this.describe,e={key:\"describeGlobal\"},this.describeGlobal$=this.cache.makeCacheable(this.describeGlobal,this,e),this.describeGlobal=this.cache.makeResponseCacheable(this.describeGlobal,this,e),this.initialize()}var n=window.jsforce.require(\"./core\"),s=window.jsforce.require(\"lodash/core\"),i=window.jsforce.require(\"./cache\");r.prototype.initialize=function(){this.sobjects={},this.cache.clear(),this.cache.get(\"describeGlobal\").removeAllListeners(\"value\"),this.cache.get(\"describeGlobal\").on(\"value\",s.bind(function(e){e.result&&s.map(e.result.sobjects,function(e){return e.name}).forEach(this.sobject,this)},this))},r.prototype._baseUrl=function(){return this._conn._baseUrl()+\"/tooling\"},r.prototype._supports=function(e){return\"sobject-collection\"!==e&&this._conn._supports.apply(this._conn,arguments)},r.prototype.request=function(){return this._conn.request.apply(this._conn,arguments)},r.prototype.executeAnonymous=function(e,t){var o=this._baseUrl()+\"/executeAnonymous?anonymousBody=\"+encodeURIComponent(e);return this.request(o).thenCall(t)},r.prototype.runTestsAsynchronous=function(e,t){var o=this._baseUrl()+\"/runTestsAsynchronous/\";return this._conn.requestPost(o,{classids:e.join(\",\")},void 0,t)},r.prototype.runTestsSynchronous=function(e,t){var o=this._baseUrl()+\"/runTestsSynchronous/\";return this._conn.requestPost(o,{classnames:e.join(\",\")},void 0,t)},r.prototype.completions=function(e,t){s.isString(e)||(t=e,e=\"apex\");var o=this._baseUrl()+\"/completions?type=\"+encodeURIComponent(e);return this.request(o).thenCall(t)},n.on(\"connection:new\",function(e){e.tooling=new r(e)}),t.exports=r},{}]},{},[1])(1)});\n//# sourceMappingURL=jsforce-api-tooling.min.js.map\n"]}